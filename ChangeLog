See the Subversion log for all the details.

Dabo 0.6 (2006-03-23) (Revision 2030):
(for now, due to lack of time, I'm just echoing svn log. If someone wants to
summarize the changes --today!-- that would be *very much* appreciated.)

------------------------------------------------------------------------
r1860 | ed | 2006-01-25 12:00:28 -0800 (Wed, 25 Jan 2006) | 2 lines

Cleaned up some wierd wrapping, and made some minor changes.

------------------------------------------------------------------------
r1862 | ed | 2006-01-25 15:33:11 -0800 (Wed, 25 Jan 2006) | 2 lines

Fixed the spurious exception that was being raised in dForm.refresh().

------------------------------------------------------------------------
r1863 | ed | 2006-01-25 18:41:44 -0800 (Wed, 25 Jan 2006) | 4 lines

Fixed a problem when switching to the Browse page of the datanav grid without first running a query. Also, there was an error being thrown if a previous query had results, and a subsequent query had no results.

Modified the code in _setCurrentRow() of dGrid so that it wasn't calling SetGridCursor() unless the position had actually changed. I had recorded up to 10 calls to this function, all with the exact same values each time I switched to the Browse page.

------------------------------------------------------------------------
r1864 | ed | 2006-01-26 09:34:20 -0800 (Thu, 26 Jan 2006) | 4 lines

Removed the code that lower-cased field names, as it was preventing the code from working with case-sensitive backends and columns containing capital letters.

Also fixed a problem where str values were not able to be properly converted to unicode.

------------------------------------------------------------------------
r1865 | ed | 2006-01-26 11:22:04 -0800 (Thu, 26 Jan 2006) | 2 lines

Switched the editor for list items from my experimental class back to the default class.

------------------------------------------------------------------------
r1866 | ed | 2006-01-26 15:11:35 -0800 (Thu, 26 Jan 2006) | 2 lines

Added a parameter to the promptForFileName() method to specify the default path for the dialog.

------------------------------------------------------------------------
r1867 | ed | 2006-01-26 17:36:12 -0800 (Thu, 26 Jan 2006) | 9 lines

Added the TreeItemContextMenu event. This differs from the normal ContextMenuEvent in that it returns the itemID of the node that was right-clicked.

Added code in the event data gathering code to store the tree item ID for these events in EventData.itemID.

Changed all the names '_id' in the dTreeView.py file to the clearer 'itemID'.

Fixed an oversight in the dSizerMixin that didn't remove the Box for a dBorderSizer when the sizer was released.


------------------------------------------------------------------------
r1868 | ed | 2006-01-26 18:03:12 -0800 (Thu, 26 Jan 2006) | 2 lines

Made the sizer outlines wider on Windows, and delayed their drawing by adding the actual drawing to a callAfter(). Still, the LayoutPanels pretty much cover them up on Windows.

------------------------------------------------------------------------
r1869 | paul | 2006-01-26 18:07:39 -0800 (Thu, 26 Jan 2006) | 1 line

Edited dPanel and dScrollPanel to not set the style if it was sent in the constructor. I need to set wx.WANTS_CHARS from my report designer scroll panel.
------------------------------------------------------------------------
r1870 | ed | 2006-01-26 19:40:40 -0800 (Thu, 26 Jan 2006) | 2 lines

Added back the SetScrollbars() call that was just removed from dScrollPanel. Without it, pages don't seem to fill their pageframe unless you manually resize the pageframe to force a layout call. I don't know why this is, but the Editor was looking pretty funky every time I opened up a new file!

------------------------------------------------------------------------
r1871 | ed | 2006-01-26 21:48:31 -0800 (Thu, 26 Jan 2006) | 2 lines

Cleaned up several small bugs and edge case problems with the GridSizer's removeRow() and removeCol() methods.

------------------------------------------------------------------------
r1872 | paul | 2006-01-27 08:01:09 -0800 (Fri, 27 Jan 2006) | 1 line

The double-Activate on Windows is really getting in the way. I haven't heard anything from my bug report yet, so I added workaround code to ignore the first Activate.
------------------------------------------------------------------------
r1873 | ed | 2006-01-27 12:16:01 -0800 (Fri, 27 Jan 2006) | 2 lines

Cleaned up the order of releasing child objects for sizers. Also fixed problem with releasing the box for border sizers.

------------------------------------------------------------------------
r1874 | ed | 2006-01-28 13:11:17 -0800 (Sat, 28 Jan 2006) | 2 lines

Fixed a bug where self._curdir was referenced before it was defined.

------------------------------------------------------------------------
r1875 | ed | 2006-01-28 15:32:34 -0800 (Sat, 28 Jan 2006) | 2 lines

Added getFunctionList() method to return a list of all 'class' and 'def' statements in the current file.

------------------------------------------------------------------------
r1876 | ed | 2006-01-29 12:50:27 -0800 (Sun, 29 Jan 2006) | 3 lines

First pass at integrating the dTable class into the dabo.db framework. Right now, if this works at all, it only works for SQLite.


------------------------------------------------------------------------
r1877 | ed | 2006-01-29 19:45:26 -0800 (Sun, 29 Jan 2006) | 2 lines

Fixed a bug wherein multiply-nested sizers might not release all of their content when release(True) is called.

------------------------------------------------------------------------
r1878 | ed | 2006-01-29 20:37:07 -0800 (Sun, 29 Jan 2006) | 2 lines

Added a 'setInactive()' method that will hide the auto-complete popup if one is visible.

------------------------------------------------------------------------
r1879 | paul | 2006-01-30 08:13:18 -0800 (Mon, 30 Jan 2006) | 2 lines

Fixed a few bugs in the report writer.

------------------------------------------------------------------------
r1880 | paul | 2006-01-30 17:28:06 -0800 (Mon, 30 Jan 2006) | 1 line

Commented out a spurious self.SetFocus() call in the closing of forms, as it was resulting in an extra deactivate/activate cycle on Windows.
------------------------------------------------------------------------
r1881 | ed | 2006-01-30 17:36:27 -0800 (Mon, 30 Jan 2006) | 4 lines

Improved edge case handling in dTreeView when there is no node selected.

Fixed a problem in dSizerMixin if an item in a grid sizer is pasted into a box sizer. Some of the sizer attributes don't apply to the box sizer; these are now ignored.

------------------------------------------------------------------------
r1882 | paul | 2006-01-31 09:28:37 -0800 (Tue, 31 Jan 2006) | 1 line

Disabled the fillGrid()'s setting of focus to the grid, as it causes problems with stealing focus away from another active form, at least on Windows. Also, it seems that such code really doesn't belong inside the function to build the grid, but perhaps we'll find it belongs somewhere else.
------------------------------------------------------------------------
r1883 | paul | 2006-01-31 11:58:23 -0800 (Tue, 31 Jan 2006) | 1 line

The xml header wasn't being converted to native line endings. Fixed.
------------------------------------------------------------------------
r1884 | paul | 2006-01-31 16:09:18 -0800 (Tue, 31 Jan 2006) | 1 line

No need to explicitly do the unicode conversion in the report fields, as that is done in the report writer.
------------------------------------------------------------------------
r1885 | ed | 2006-01-31 16:25:28 -0800 (Tue, 31 Jan 2006) | 12 lines

Added a Refresh event. This is raised when dForm.refresh() is called. All dPemMixin classes will receive it, and fire their refresh() hook method.

Added dynamic properties. Every property can be made dynamic by prefixing it with 'Dynamic'. Dynamic props are set to any callable function; when the object receives a Refresh event, the function's return value is used to set the value of the underlying property.

Example: given a label and a function 'currTime()' in a form that returns the current time, issuing the following:

	label.DynamicCaption = label.Form.currTime
	
will result in the label's Caption property being updated every time label.Form.refresh() is called with the value of the current time.

Also added two methods to dabo.ui for converting image data back to bitmaps and images. These were necessary because I noticed that when Editor.py was called from locations other than its own directory, the image file for the function button was not found. The solution was to convert the .png file to a data stream using wx.tools.img2py.py, and store that in Editor.py.

------------------------------------------------------------------------
r1886 | ed | 2006-01-31 16:36:52 -0800 (Tue, 31 Jan 2006) | 2 lines

Whoops! Left an old call in the event bindings.

------------------------------------------------------------------------
r1887 | ed | 2006-01-31 18:09:28 -0800 (Tue, 31 Jan 2006) | 4 lines

Fixed the problem I introduced with __getattr__().

Added back the call to Refresh() in the form's refresh() method.

------------------------------------------------------------------------
r1888 | ed | 2006-01-31 18:16:02 -0800 (Tue, 31 Jan 2006) | 2 lines

OK, forgot about that old 'dead object' problem when using callAfter. This fixes that.

------------------------------------------------------------------------
r1889 | paul | 2006-02-01 16:23:51 -0800 (Wed, 01 Feb 2006) | 13 lines

This commit lets you set dApp.UI=None, and setup() won't try to load a UI.
You have to do it explicitly, though, such as:

app = dabo.dApp()
app.UI = None
app.setup()

--or--

app = dabo.dApp(UI=None)
app.setup()


------------------------------------------------------------------------
r1890 | ed | 2006-02-02 05:13:52 -0800 (Thu, 02 Feb 2006) | 10 lines

Major revamping of the whole refresh/update/dynamic design.

First, refresh() simply repaints the object and anything contained in it. It simply calls the wx.Refresh() method.

There is now a method named 'update()' which will update any dynamic aspects of a control, such as its Dynamic* properties, or its data bindings, if any. If the object is a form, calling update triggers a ValueUpdate event that all data-aware controls will receive. All objects with children will raise an Update event in order to propagate the update message. You can call update() on a specific object, and only that object and its children will be updated.

This clarifies the language we use: 'refresh' refers only to having the object repainted on the screen, while 'update' can change aspects of the object, such as its value or other properties.

Updated all the classes that referred to these events and methods by their old names. 

------------------------------------------------------------------------
r1891 | ed | 2006-02-02 07:26:16 -0800 (Thu, 02 Feb 2006) | 2 lines

Found another line that needs that deadObject wrapping...

------------------------------------------------------------------------
r1892 | ed | 2006-02-02 15:32:49 -0800 (Thu, 02 Feb 2006) | 3 lines

First crack at creating a double-buffered drawing surface. The new class, 'dDrawPanel', is a subclass of dPanel, but has its repainting handled through the double-buffer techniques outlined on the wxPython wiki.


------------------------------------------------------------------------
r1893 | ed | 2006-02-03 06:43:17 -0800 (Fri, 03 Feb 2006) | 2 lines

I think I located the problem with the double-buffered design. The regular idle-based calls to _redraw() were not using the buffered image. This should fix that.

------------------------------------------------------------------------
r1894 | ed | 2006-02-03 17:42:45 -0800 (Fri, 03 Feb 2006) | 4 lines

Added bookmark support to dEditor.

Fixed a bug in the default spacing in the sizer.

------------------------------------------------------------------------
r1895 | paul | 2006-02-04 10:50:38 -0800 (Sat, 04 Feb 2006) | 6 lines

Attempting to figure out where the performance slowdowns are in the new
update() mechanism, I got rid of the try blocks by checking once for
dead object at top. Not sure, but I think this gained a very modest
speed increase. 


------------------------------------------------------------------------
r1896 | paul | 2006-02-04 10:51:59 -0800 (Sat, 04 Feb 2006) | 5 lines

Added a datanav.Form.SetFocusToBrowseGrid property. When True (the default),
the browse grid will get focus when the browse page is activated. This is 
how it always worked before my changes a few days ago, that took this out
of the grid class where it didn't belong.

------------------------------------------------------------------------
r1897 | ed | 2006-02-04 14:03:39 -0800 (Sat, 04 Feb 2006) | 4 lines

Bookmarks in dEditor now persist when you save the file. If you re-open a saved file with bookmarks, they are restored.

Refactored dUserSettingProvider a little bit. Fixed a bug in getUserSettingKeys() that resulted in it always returning an empty list. Added deleteUserSetting() and deleteAllUserSettings(); these do just what you think they would.

------------------------------------------------------------------------
r1898 | ed | 2006-02-04 15:16:40 -0800 (Sat, 04 Feb 2006) | 2 lines

Added calculation of left margin width: getMarginWidth()

------------------------------------------------------------------------
r1899 | ed | 2006-02-05 06:31:26 -0800 (Sun, 05 Feb 2006) | 2 lines

When the Encoding is not correct, it tries either 'latin-1' or 'utf8' instead, and adds a message to the error log.

------------------------------------------------------------------------
r1900 | paul | 2006-02-05 17:59:49 -0800 (Sun, 05 Feb 2006) | 4 lines

This code delays the refreshing and seems to make only one actual Refresh()
called per object, greatly speeding up the refreshing again. My test was
using the keyboard to scroll up and down in a datanav grid.

------------------------------------------------------------------------
r1901 | ed | 2006-02-06 06:56:56 -0800 (Mon, 06 Feb 2006) | 4 lines

Fixed the recent changes to dPemMixin that would still result in dead object exceptions.

Added a release() method to dColumn.

------------------------------------------------------------------------
r1902 | paul | 2006-02-06 08:32:50 -0800 (Mon, 06 Feb 2006) | 13 lines

Simplified dPemMixin's __getattr__ and __setattr__ somewhat. I still believe it
would be better to be explicit about dynamic properties, and will try to find
some time to make that happen.

Changed a couple exec() calls to setattr() calls instead, which may be safer 
if not faster, but definitely more explicit and easier to understand.

Added back a needed test for deadObject that I removed from the onUpdate
callback, and changed the test in update() back to testing for the deadObject
instead of putting it in a try block.



------------------------------------------------------------------------
r1903 | paul | 2006-02-06 11:22:53 -0800 (Mon, 06 Feb 2006) | 4 lines

Turns out, one of my FutureCall changes ended up causing a recursion in the
UpdateValue event handler. This fixes it, but also decreases performance
somewhat as the event callbacks happen immediately.

------------------------------------------------------------------------
r1904 | paul | 2006-02-06 16:36:58 -0800 (Mon, 06 Feb 2006) | 54 lines

Added makeDynamicProperty() function to dabo.ui, which creates a dynamic
property definition for the passed normal property object. I wanted to put 
this in propertyHelperMixin but it doesn't appear to me that dynamic 
properties are really at all useful outside of a UI context (indeed, 
everything else having to do with dynamic props is defined inside 
dPemMixin...).

Explicitly defined Dynamic properties for most of the existing properties
defined in dPemMixin. Removed the automagical __getattr__/__setattr__ 
overrides.

This dynamism is really cool, and I'm sorry that we aren't seeing completely
eye-to-eye on it. But here are some things that "just work" with my
implementation:

1) Run SimpleFormWithBizobj, and in the command window type:
> def dfb(biz):
>    return biz.ccity.strip() == "Arecibo"
    
> self.PageFrame.Pages[2].setAll("DynamicFontBold", (dfb, self.getBizobj()))

Now, go to the edit page and scroll through. The setAll() call just worked without
any changes needed. Something is keeping it working with the original implementation
but I admit that I don't see why, at first glance.

2) Notice when you are typing in the command window, that the dynamic properties
show up in the list. This is really what I mean when I talk about things being
documented.

3) Passing dynamic props to the constructor is the same as defining them in the class
txt = dabo.ui.dTextBox(self, DynamicEnabled=myFunc)
txt.DynamicFontItalic = myFunc

Both of the above calls work as usual WRT the Dabo Property Interface.

Granted, there's more work involved when defining a new class (gotta remember to tell
Python about the dynamic props). But after all is said, done, and considered, it is 
my genuine hope and belief that this was the right way to go. But I am still sorry for 
stepping on toes.

I'll follow through with making other properties (those outside dPemMixin) dynamic as
well. 

There are things to consider in the future, such as:

+ Do we make a DynamicValue?
+ If so, does it override the value gotten from FieldSource, if set?
+ What bearing does this have on the dynamism already present in, e.g.,
the setting of dynamic values from non-bizobj data bindings?

Anyway, thanks for putting in the Dynamic stuff, Ed. Once we take care of the refresh
overhead - perhaps by using the timer/observer-based approach I talked about this 
morning - this is really going to be killer.

------------------------------------------------------------------------
r1905 | ed | 2006-02-06 17:21:40 -0800 (Mon, 06 Feb 2006) | 2 lines

Added an option in dabo.settings to avoid the update delays, which were severely bogging down the Designer.

------------------------------------------------------------------------
r1906 | ed | 2006-02-06 17:27:51 -0800 (Mon, 06 Feb 2006) | 2 lines

Correction to the last commit. I left the explicit 'settings' reference in the version I committed by mistake.

------------------------------------------------------------------------
r1907 | ed | 2006-02-07 07:32:34 -0800 (Tue, 07 Feb 2006) | 2 lines

Implemented the handling of RowSpan/ColSpan for grid sizers.  Added a GridSizerSpanException class that is raised if an attempt to set the span to a location that is already occupied.

------------------------------------------------------------------------
r1908 | paul | 2006-02-07 08:08:52 -0800 (Tue, 07 Feb 2006) | 6 lines

Fixed up a couple issues in test.py:

+ Changed 'object' to 'obj' because 'object' is a reserved word.
+ Added a SetScrollbars() call because a few weeks ago I took that
  out of dScrollPanel. TODO: Further abstraction of dScrollPanel.

------------------------------------------------------------------------
r1909 | paul | 2006-02-07 12:43:44 -0800 (Tue, 07 Feb 2006) | 16 lines

Sorted out some problems and redundancies in the update() cycle:

+ Removed the update delays, as they caused other problems.

+ Because of the recursive nature of the update() function, both ValueUpdate
  and Update events were triggering the controls to update themselves. Removed
  ValueUpdate event and consolidated into the update() cycle.

+ The Refresh() call inside update() was being called way too much. In testing
  different ways to limit this refreshing, I discovered that for all the cases
  I tested, the Refresh() wasn't needed at all. So I removed it. If you need
	a refresh() you need to call that explicitly now. I think this may be better
	anyway because they are different concepts.
 		
Performance still isn't stellar, but it does seem much better now.

------------------------------------------------------------------------
r1910 | paul | 2006-02-08 13:43:05 -0800 (Wed, 08 Feb 2006) | 8 lines

Fixed up documentation for bizobj's scan() function, adding a note mentioning
the self.exitScan flag. 

However, there's more to do. If the user is supposed to be able to manipulate
the __scanReverse and __scanRestorePosition flags, they shouldn't be 
underscored. If the user isn't supposed to be able to manipulate them,
they shouldn't be mentioned in the docstring.

------------------------------------------------------------------------
r1911 | ed | 2006-02-08 14:39:33 -0800 (Wed, 08 Feb 2006) | 4 lines

Added AutoCommit as a property.

Cleaned up irregular spacing, and alphabetized the property get/set methods.

------------------------------------------------------------------------
r1912 | ed | 2006-02-08 14:44:41 -0800 (Wed, 08 Feb 2006) | 6 lines

Revamped the entire flow for transactions. These changes have been tested on MySQL and SQLite, but still need to be tested with Firebird and PostgreSQL.

Changed the default for bizobjs, cursors, etc., to not autocommit. The AutoCommit property of the bizobj is simply a pass-through to the cursor's AutoCommit property.

Also cleaned up some inconsistent spacing and method ordering.

------------------------------------------------------------------------
r1913 | paul | 2006-02-09 08:27:15 -0800 (Thu, 09 Feb 2006) | 8 lines

The automatic switching of encodings was resulting in a trial and a message
for every single failing field. Modified to persist the changing of the
encoding and to log just one message. 

I'm wondering... this iterating of the fields in the resultset is adding
a lot of overhead to every requery... do the various backends offer 
conversion to unicode for us perhaps?

------------------------------------------------------------------------
r1914 | paul | 2006-02-09 08:42:10 -0800 (Thu, 09 Feb 2006) | 4 lines

Removed the massaging of mxdatetimes to python datetimes: the MySQLdb
adapter has been giving python datetimes priority for well over a year
now, and we support mxDateTimes anyway so it shouldn't matter.

------------------------------------------------------------------------
r1915 | paul | 2006-02-09 09:00:49 -0800 (Thu, 09 Feb 2006) | 2 lines

Oops.

------------------------------------------------------------------------
r1916 | paul | 2006-02-09 09:15:24 -0800 (Thu, 09 Feb 2006) | 3 lines

Fixed typo in dGrid. Fixed minor issue in dPemMixin: only dForm has the
getCurrentRecordText() function.

------------------------------------------------------------------------
r1917 | paul | 2006-02-09 11:48:33 -0800 (Thu, 09 Feb 2006) | 8 lines

Modified datanav to allow for manual setups that don't use fieldSpecs or
relationSpecs. I'll be committing a change to the AppWizard that allows
for this option soon.

Moved SelectPageClass, BrowsePageClass, and EditPageClass from PageFrame
to Form, since that is a better central location for these properties.


------------------------------------------------------------------------
r1918 | paul | 2006-02-09 20:26:21 -0800 (Thu, 09 Feb 2006) | 5 lines

I was sipping a Belgian Abbey Ale, entering my invoices and modifying some
time entries, when imagine my surprise - I hit "save" and my app froze.
Turns out, I got dropped into pdb! ;)


------------------------------------------------------------------------
r1919 | ed | 2006-02-09 21:17:46 -0800 (Thu, 09 Feb 2006) | 7 lines

EXPERIMENTAL!
Added a splash screen to the Dabo app startup. This is based on Andrea Gavana's AdvancedSplash class, and allows for cool shaped windows, etc.

Right now on the Mac there is a noticeable delay from when the splash screen shaped frame appears and when the bitmap is drawn in the Paint event. I'm hoping to be able to figure out why, and also hope that this is just a Mac thing, as Andrea says he's tested this on WinXP and Gtk.

If this works, we may want to consider better artwork for our default splash screen, but this transparent 'dabo' lettering will do for now.

------------------------------------------------------------------------
r1920 | ed | 2006-02-09 21:27:40 -0800 (Thu, 09 Feb 2006) | 2 lines

Fixed some bugs with Gtk, but still looks bad and crashes, at least on FC2. Will try later with Windows and Ubuntu.

------------------------------------------------------------------------
r1921 | ed | 2006-02-10 05:59:45 -0800 (Fri, 10 Feb 2006) | 8 lines

Fixed the crashing problem on Gtk. Improved the appearance of the splashscreen on Gtk and Windows without
affecting OS X.

There is still a 'border' around the image on Gtk; I don't know if this is
the result of my poor graphic work, or something inherent in wxWidgets on
Gtk.


------------------------------------------------------------------------
r1922 | ed | 2006-02-10 14:39:15 -0800 (Fri, 10 Feb 2006) | 7 lines

Turned off the default for showing the splash screen. You can now pass the splash screen settings as parameters to the constructor of dApp, since that's the only practical way to override them.

Changed the bulk of initialization to the constructor of uiApp. Previously the uiApp object was created, and then things like platform, app reference, etc., weren't established until setup(). dApp now passes a callback to uiApp that is used to continue the startup process once the uiApp has finished initializing.

Many changes to the SplashScreen class. It now works decently on OS X and Windows, and still looks like crap on Gtk. 


------------------------------------------------------------------------
r1923 | ed | 2006-02-10 16:56:52 -0800 (Fri, 10 Feb 2006) | 2 lines

Fixed a bug I introduced with the splash screen callback not firing under some conditions.

------------------------------------------------------------------------
r1924 | ed | 2006-02-10 18:23:33 -0800 (Fri, 10 Feb 2006) | 2 lines

Added the ability to set the DataSource to an object, rather than just a string that can be eval'd to an object.

------------------------------------------------------------------------
r1925 | paul | 2006-02-11 08:33:26 -0800 (Sat, 11 Feb 2006) | 1 line

On Windows, this callAfter is needed so that the form's geometry gets saved. This problem was manifesting in the Report Designer Object Tree and Properties forms.
------------------------------------------------------------------------
r1926 | ed | 2006-02-11 10:29:20 -0800 (Sat, 11 Feb 2006) | 4 lines

Changed the 'getMaxRow/Col' methods to 'getHighRow/Col' in order to avoid confusion with the MaxRows/Cols props in dGridSizer.

Modified both sizer classes to accept windows and not just SizerItems when setting/getting prop values.

------------------------------------------------------------------------
r1927 | ed | 2006-02-11 12:09:09 -0800 (Sat, 11 Feb 2006) | 2 lines

Fixed a bug with the wx alignment constants. 

------------------------------------------------------------------------
r1928 | ed | 2006-02-11 17:34:06 -0800 (Sat, 11 Feb 2006) | 4 lines

Changed the callAfter(self.Destroy) in dFormMixin to a call to safeDestroy() instead. This checks for the status of the object to see if it has already been destroyed elsewhere. This seems to be more of a problem on Windows, where I was getting errors with every form that closed.

Updated dEditor to do a semi-smart sort for its getFunctionList() method. It sorts by class, and within class, by method. However, it is still fooled by things like class definitions nested within methods. But for now it works pretty well.

------------------------------------------------------------------------
r1929 | ed | 2006-02-12 07:12:14 -0800 (Sun, 12 Feb 2006) | 2 lines

Added the movePage() method, which takes either a page reference or a page index, and moves the page to the specified position. The page is then selected, unless the third parameter 'selecting' is False.

------------------------------------------------------------------------
r1930 | ed | 2006-02-12 07:17:59 -0800 (Sun, 12 Feb 2006) | 2 lines

Fixed a bug in the bindKey() method where it would only accept mod keys in lower case.

------------------------------------------------------------------------
r1931 | ed | 2006-02-12 11:59:16 -0800 (Sun, 12 Feb 2006) | 6 lines

Changed all the HeaderBack/ForegroundColor props to HeaderBack/ForeColor. This makes it much more consistent with the other color properties in Dabo. 

Fixed a ordering bug when adding columns in a batch.

Fixed the getForm() method of dMessageBox, which wasn't returning anything.

------------------------------------------------------------------------
r1932 | ed | 2006-02-12 15:31:02 -0800 (Sun, 12 Feb 2006) | 5 lines

Fixed possible problem with dApp referencing uiApp before it has been instantiated.

Added attribute initialization for _oldVal in dDataControlMixinBase.


------------------------------------------------------------------------
r1933 | ed | 2006-02-12 15:36:46 -0800 (Sun, 12 Feb 2006) | 6 lines

Added a getInt() method to dabo.ui.uiwx.

Fixed the splashscreen display on Windows.

Added the ability to set the font face and size for the editor.

------------------------------------------------------------------------
r1934 | ed | 2006-02-13 05:34:55 -0800 (Mon, 13 Feb 2006) | 4 lines

Fixed the double-event problem on Windows. Also added color to the demos to make the panels more visible. 

Modified the Orientation property of dSplitter so that it updates the physical appearance immediately, instead of requiring an unsplit/split first.

------------------------------------------------------------------------
r1935 | paul | 2006-02-13 06:47:17 -0800 (Mon, 13 Feb 2006) | 3 lines

Fixed a bug that kept bands with no height set from being printed with the
default band height.

------------------------------------------------------------------------
r1936 | paul | 2006-02-13 08:27:28 -0800 (Mon, 13 Feb 2006) | 4 lines

Added a quick fix to make the about page look better after some sizer changes.
Perhaps the original code was relying on a bug that has now been fixed.


------------------------------------------------------------------------
r1937 | ed | 2006-02-13 10:31:38 -0800 (Mon, 13 Feb 2006) | 4 lines

Fixed a potential bug in dEditor if you go to set the font size/face and there are no defaults in place.

Added a couple of convenience properties to dImage. BitmapWidth and BitmapHeight return the dimensions of the displayed bitmap, not the overall control.

------------------------------------------------------------------------
r1938 | ed | 2006-02-13 15:51:36 -0800 (Mon, 13 Feb 2006) | 4 lines

Added the setCheck() method to dMenu. Given a caption, it will check any menus whose captions match. By default it will uncheck any that don't match; you can pass False as the second argument and leave non-matchers alone. Also added clearChecks() to uncheck all menu items in a menu.

Exposed the FileName and FilePath properties in dEditor.

------------------------------------------------------------------------
r1939 | paul | 2006-02-13 16:32:28 -0800 (Mon, 13 Feb 2006) | 4 lines

Added some syntax sugar for referring to fields and variables. Where you
used to have to refer to self.Record["clientname"], you can now do
self.clientname. Same with self.Variables.

------------------------------------------------------------------------
r1940 | ed | 2006-02-14 07:21:27 -0800 (Tue, 14 Feb 2006) | 4 lines

Added the 'callEvery' function to dabo.ui. This function accepts an interval (in milliseconds), and callable reference, and optional arguments to that callable. It then creates a timer that fires the callable every <interval> milliseconds, passing along any optionally included arguments. The timer reference is then returned, where it can be controlled by calling stop(), start() or release().

This is based on the dCallEvery class that Brandon Singer proposed. I made it a function in dabo.ui because I felt it was more consistent with the existing functions callAfter() and callAfterInterval().

------------------------------------------------------------------------
r1941 | ed | 2006-02-14 18:06:00 -0800 (Tue, 14 Feb 2006) | 2 lines

Changed the default for forms to not automatically show "Record 1 of 0" or similar meaningless database information in the status bar. Set it back to True for the datanav Form class, so all datanav apps should remain unchanged. All of the apps in the demo and IDE directories that don't query data, though, no longer show that message.

------------------------------------------------------------------------
r1942 | ed | 2006-02-14 18:35:24 -0800 (Tue, 14 Feb 2006) | 2 lines

Creating an instance of dApp doesn't automatically create an instance of uiApp. Instead, it now asks dabo.ui to get it a reference, and dabo.ui either returns the current instance if one already exists, or creates one if not. This allows you to run wxPython apps from within wxPython apps.

------------------------------------------------------------------------
r1943 | ed | 2006-02-15 14:13:29 -0800 (Wed, 15 Feb 2006) | 5 lines

Added some rudimentary support for file drag/drop. Right now, you can call 'createFileDropTarget' on an object to make it able to respond to files dropped on it. Pass in an optional handler object reference; otherwise, the handler is set to the object itself. The drop event is passed on to the handler by calling its 'processDroppedFiles' method, which should be overridden in the handler object to do the specific processing of the files.

Added a 'Column' property to dEditor; this represents the column position in the current line, and can be changed to move the cursor within the line.


------------------------------------------------------------------------
r1944 | ed | 2006-02-16 06:21:47 -0800 (Thu, 16 Feb 2006) | 2 lines

Added option in getItemByRowCol() to return the sizer item in the given position instead of the object managed by that sizer item.

------------------------------------------------------------------------
r1945 | ed | 2006-02-16 07:32:33 -0800 (Thu, 16 Feb 2006) | 2 lines

Added method 'isItemChecked()' to allow you to determine the checked status of any menu item.

------------------------------------------------------------------------
r1946 | paul | 2006-02-16 08:36:49 -0800 (Thu, 16 Feb 2006) | 4 lines

Added dabo.ui.getMousePosition(), which returns the position of the mouse
on the screen. This is in contrast to dPemMixin.getMousePosition(), which 
gets the position of the mouse inside the client window.

------------------------------------------------------------------------
r1947 | paul | 2006-02-16 09:58:09 -0800 (Thu, 16 Feb 2006) | 3 lines

Reworked the setting of tooltips, which works marginally better. Waiting for
some guidance from Robin, however, WRT setting tooltips to a None value.

------------------------------------------------------------------------
r1948 | ed | 2006-02-16 12:14:25 -0800 (Thu, 16 Feb 2006) | 2 lines

Added the Split property, which is a simple way to determine if the control is split, or to change its state.

------------------------------------------------------------------------
r1949 | paul | 2006-02-16 12:23:06 -0800 (Thu, 16 Feb 2006) | 8 lines

Commented out all code that creates a list editor in the report prop sheet.
This is because it effectively limits the possible values to just the 
exact values in the list, but we want more flexibility. We need to add an
editor to the propsheet that uses a combobox, so the editor doesn't blow
away any custom expressions and so the user can type in whatever they want
in addition to being able to select from the list.


------------------------------------------------------------------------
r1950 | paul | 2006-02-16 13:37:25 -0800 (Thu, 16 Feb 2006) | 1 line

Fixed a couple errors having to do with variables being defined but not named yet.
------------------------------------------------------------------------
r1951 | ed | 2006-02-16 14:06:06 -0800 (Thu, 16 Feb 2006) | 4 lines

Update to allow execution of SQL statements without affecting the current data set. The bizobj has a new pass-through method named 'execute()', which takes a statement understood by the backend database and passes it to its cursor's execute method.

The cursor class has been modified to run all statements that don't begin with 'select' through its auxiliary cursor, thereby preserving its data set. Preliminary tests that I've run have confirmed that these are working correctly, but there should be a lot more testing done before I am confident that these changes are truly sound and can handle whatever we can toss at them.

------------------------------------------------------------------------
r1952 | paul | 2006-02-16 15:37:05 -0800 (Thu, 16 Feb 2006) | 3 lines

Set the locale if not set yet. This lets expressions like 'locale.format()'
work in reports.

------------------------------------------------------------------------
r1953 | paul | 2006-02-16 15:38:14 -0800 (Thu, 16 Feb 2006) | 1 line

Fixed another problem with report variables.
------------------------------------------------------------------------
r1954 | ed | 2006-02-16 17:12:17 -0800 (Thu, 16 Feb 2006) | 2 lines

You can now set the DataSource to an actual object, instead of having to set it to a string that could be resolved to an object. 

------------------------------------------------------------------------
r1955 | ed | 2006-02-16 17:13:57 -0800 (Thu, 16 Feb 2006) | 2 lines

Doh! Left the debug stuff in by mistake. This removes the trace call.

------------------------------------------------------------------------
r1956 | paul | 2006-02-16 17:39:15 -0800 (Thu, 16 Feb 2006) | 1 line

This fixes locale to actually pull from the Windows settings.
------------------------------------------------------------------------
r1957 | paul | 2006-02-17 13:47:54 -0800 (Fri, 17 Feb 2006) | 2 lines

Changed the wxPython version requirements in the dabo docstring.

------------------------------------------------------------------------
r1958 | ed | 2006-02-17 18:13:28 -0800 (Fri, 17 Feb 2006) | 6 lines

Added basic support for storing lists/tuples in the user settings. 

Added a simple way of persisting MRU lists in applications. A new dApp property, '_persistentMRUs' is a dict that contains the name of the menu as the key for the entry, and the function to bind the items to as the value. The framework will then handle saving and restoring MRU lists upon app startup and closing.

Modified the uiApp to accept just the menu caption as an identifier instead of requiring the actual menu. This is necessary to create MRU lists for context menus, or for restoring menus at app startup.

------------------------------------------------------------------------
r1959 | ed | 2006-02-18 12:55:23 -0800 (Sat, 18 Feb 2006) | 2 lines

Updated the requirement that a bizobj be found for all data sources. SInce that was written, Dabo's use of data binding has expanded to lots of non-bizobj uses.

------------------------------------------------------------------------
r1960 | ed | 2006-02-19 19:09:48 -0800 (Sun, 19 Feb 2006) | 2 lines

Fixed bad syntax. I'm surprised that this ever worked before!

------------------------------------------------------------------------
r1961 | ed | 2006-02-20 14:18:31 -0800 (Mon, 20 Feb 2006) | 2 lines

Fixed a bug that was due to a change from 'Halign/Valign' to 'HAlign/VAlign'.

------------------------------------------------------------------------
r1962 | ed | 2006-02-20 14:22:40 -0800 (Mon, 20 Feb 2006) | 2 lines

Completed the majority of the work needed to implement saved classes that can be used in other class designs; it was working from the Designer, but not when you ran the form. These changes implement the whole inheritance structure so that if you change the underlying class, any changes not explicitly overridden in the design that uses that class are reflected. This works for both property changes as well as code changes. 

------------------------------------------------------------------------
r1963 | ed | 2006-02-21 06:11:12 -0800 (Tue, 21 Feb 2006) | 8 lines

Switched the default order of arguments in callAfterInterval(). It makes more sense to specify the interval first, followed by the function and its arguments. Sticking the interval between the function and its arguments seems very awkward. I added code to callAfterInterval() to check if it received a call in which the interval is the second argument (i.e., the original style) and switch them around in that event.

Removed dDrawPanel as a class. Turns out that adding double-buffering to panels doesn't affect their performance noticeably, so it made sense to turn this on for all dPanel objects by default. However, if you run into a situation where this adversely affects your app, there is a new property named 'Buffered' that will turn this behavior off (i.e., make it work like it used to) when set to False.

*IF YOU USED dDrawPanel IN YOUR CODE, THIS WILL BREAK IT!*

You must update by changing all references to dDrawPanel to simply dPanel.

------------------------------------------------------------------------
r1964 | ed | 2006-02-21 11:05:01 -0800 (Tue, 21 Feb 2006) | 2 lines

Changed the default for double buffering back to off. Seems that it wasn't as transparently simple as I thought.

------------------------------------------------------------------------
r1965 | ed | 2006-02-22 05:38:10 -0800 (Wed, 22 Feb 2006) | 2 lines

Changed some of the defaults to behave better when typing values that don't appear in the auto-complete list. I got tired of the editor sticking a string in my code that I didn't want.

------------------------------------------------------------------------
r1966 | paul | 2006-02-23 18:23:39 -0800 (Thu, 23 Feb 2006) | 2 lines

Updated the todo list. 

------------------------------------------------------------------------
r1967 | paul | 2006-02-23 18:26:07 -0800 (Thu, 23 Feb 2006) | 2 lines

Added DesignerLock property to all report objects, not just bands.

------------------------------------------------------------------------
r1968 | ed | 2006-02-25 10:21:59 -0800 (Sat, 25 Feb 2006) | 2 lines

Added some defensive code for instances where a DataSource object does not have a '_name' attribute.

------------------------------------------------------------------------
r1969 | ed | 2006-02-25 11:37:56 -0800 (Sat, 25 Feb 2006) | 2 lines

Removed the old syntax for begin/commit/rollbackTransaction. The default for these actions in dBackendObject is to call the appropriate method on the connection, not to execute a command on the cursor.

------------------------------------------------------------------------
r1970 | paul | 2006-02-26 09:06:46 -0800 (Sun, 26 Feb 2006) | 3 lines

Added dynamic properties for the rest of the UI classes.


------------------------------------------------------------------------
r1971 | ed | 2006-02-26 14:38:48 -0800 (Sun, 26 Feb 2006) | 2 lines

Removed the call to cursor.connection.begin() in the beginTransaction() method. This does not seem to be needed for most backends; in fact, it is typically used to override autocommit to create temporary explicit transactions.

------------------------------------------------------------------------
r1972 | echo | 2006-02-28 10:51:19 -0800 (Tue, 28 Feb 2006) | 7 lines

Table creation now works for MySQL also.

The class dAutoBizobj is a bizobj that has a dTable.

The function AutoCreateTables() will try to create all the tables that have been setup with dAutoBizobj objects. If it can't create the tables, a message pops up for the user and the db admin. The db admin can enter the username and password for access to create tables or the db admin can manualy execute the queries in the queries.sql.

Also, having autotables for more than database or even more than one host does not messup or crash, it is handled.
------------------------------------------------------------------------
r1973 | ed | 2006-03-01 05:44:40 -0800 (Wed, 01 Mar 2006) | 6 lines

Added protective code for the PageChanged event in the pageframe mixin.

Corrected a one-off error in the grid sizer's getHighRow/Col methods.

Added improved error logging when _setValue() fails in dDataControlMixin.

------------------------------------------------------------------------
r1974 | echo | 2006-03-01 06:01:53 -0800 (Wed, 01 Mar 2006) | 1 line

forgot a file
------------------------------------------------------------------------
r1975 | ed | 2006-03-01 13:43:52 -0800 (Wed, 01 Mar 2006) | 9 lines

Converted the dTimer from a bitmap to a non-visible control based directly on wx.Timer. This makes it fit in much better with dabo.ui.callEvery(), which is much more convenient to use in many cases.

Fixed a problem in eventMixin whereby an object without a GetParent() method could cause an error.

Began coding for the Hover property, which will allow for easier visual coding of MouseOver events. It isn't fully implemented yet, so don't try working with it.

Fixed a bug in dPanel whereby Resize events were not propagated to subclasses when Buffered = True.


------------------------------------------------------------------------
r1976 | paul | 2006-03-01 14:37:28 -0800 (Wed, 01 Mar 2006) | 2 lines

Fixed the callEvery to bind to the hit event and call the function.

------------------------------------------------------------------------
r1977 | ed | 2006-03-01 16:34:12 -0800 (Wed, 01 Mar 2006) | 2 lines

Implemented the Hover property in dPemMixin. The reason for this rather than relying on MouseLeave to terminate the effect is that there are many time when it seems that the mouse leaves the area without triggering the MouseLeave event. The Hover mechanism employs a timer to check for mouse position, and fire the MouseLeave code if it detects that the mouse position is outside of the control.

------------------------------------------------------------------------
r1978 | ed | 2006-03-01 17:25:28 -0800 (Wed, 01 Mar 2006) | 2 lines

Fixed a bug that prevented a new file from being saved.

------------------------------------------------------------------------
r1979 | ed | 2006-03-01 18:22:46 -0800 (Wed, 01 Mar 2006) | 2 lines

Added a manual call to afterInit() in all objects added via custom classes. Since the code cannot be bound to the object until the object exists, it is too late for custom afterInit() code to be called, since _afterInit() fires during the object creation.

------------------------------------------------------------------------
r1980 | echo | 2006-03-03 08:04:20 -0800 (Fri, 03 Mar 2006) | 1 line

bug fix
------------------------------------------------------------------------
r1981 | paul | 2006-03-03 09:53:18 -0800 (Fri, 03 Mar 2006) | 6 lines

Added a CustomSQL property to the datanav form. If set, the settings in the 
select page will be ignored and the contents of CustomSQL used instead.

TODO: Add an "expert mode" to the select page, that lets the user hand-edit
the SQL.

------------------------------------------------------------------------
r1982 | paul | 2006-03-03 13:51:12 -0800 (Fri, 03 Mar 2006) | 2 lines

Added a user interface for overriding the sql.

------------------------------------------------------------------------
r1983 | ed | 2006-03-05 08:42:35 -0800 (Sun, 05 Mar 2006) | 15 lines

Added defaults to dGrid.getValue(). If no row or col is specified, it defaults to the current row/column, respectively.

Added fontMetricFromDrawObject() to dabo.ui. This enables simple calculation of the width/height of a drawn text object.

Cleaned up the property methods and definitions of dTextBox to make them alphabetized, and to make the strings localized. Also relaxed the values accepted for the Alignment property.

Added a fitToSizer() method to dPemMixin. This will resize the object to fit the size required by the sizer represented in its Sizer property. You can also pass in extraWidth and extraHeight values to adjust the size further.

Added a call to flushValue() to the _setValue() method for data controls in the event that the value didn't change. I was running into cases where data binding properties were set up after the initial value was set, and there was no way to propagate the data binding without doing something silly like changing the value to something random and then changing it back.

Added 'Alignment' to the pre-init properties of dCheckBox. Cleaned up the property methods and definitions to make them alphabetized, and to make the strings localized. Also relaxed the values accepted for the Alignment property.

Added an option to dEditor.changeFontSize() to accept strings in the format "+n" or "-n". These will increment or decrement the font size by 'n' points.


------------------------------------------------------------------------
r1984 | ed | 2006-03-06 07:43:37 -0800 (Mon, 06 Mar 2006) | 2 lines

Overrode the GetBestSize() method for dFoldPanelBar. This method takes into account the heights of the caption bars, as well as the height of the parent. Before this fix, the PropSheet would sometimes size itself too big for the other caption bars to fit; now all the caption bars remain visible.

------------------------------------------------------------------------
r1985 | ed | 2006-03-06 17:42:06 -0800 (Mon, 06 Mar 2006) | 2 lines

Moved the _addCode() method out of dFormMixin, since it really is more generic than that. It now lives in dObject._addCodeAsMethod(), which takes a dict of method name/code pairs and adds them as methods of the object. dPemMixin now looks for a keyword argument called 'srcCode', and if found, adds it to the object.

------------------------------------------------------------------------
r1986 | ed | 2006-03-09 13:47:29 -0800 (Thu, 09 Mar 2006) | 6 lines

This class handles the conversion of cdxml text to a class object. It has one main method: classFromXml(), which takes a cdxml file and returns the main class stored in that file. This class can then be instantiated as part of a live app.

It is working for most simple classes. You can create layouts using sizers, panels, and add code to any object, and it will work. However, support for GRIDS and PAGEFRAMES is not completed yet. ANY SAVED DESIGN WITH GRIDS OR PAGEFRAMES WILL BE BROKEN NOW.

This will, of course, be temporary, until I can add that logic to this class.

------------------------------------------------------------------------
r1987 | ed | 2006-03-09 13:49:16 -0800 (Thu, 09 Mar 2006) | 2 lines

Updated dabo.ui to use the new cdxml converter in createForm().

------------------------------------------------------------------------
r1988 | ed | 2006-03-10 16:20:42 -0800 (Fri, 10 Mar 2006) | 4 lines

Added support for grids and pageframes. These are now re-created as they appeared in the design.

This is now ready for testing and bug reports.

------------------------------------------------------------------------
r1989 | ed | 2006-03-10 16:23:15 -0800 (Fri, 10 Mar 2006) | 7 lines

Added support for passing the attProperties parameter to grid columns.

Modified the appendPage() and insertPage() methods of dPageFrameMixin to accept either a page class, as it always has, or an already-instantiated page.

Fixed an oversight in dSizerMixin that could sometimes result in the Parent property not always being set correctly.


------------------------------------------------------------------------
r1990 | paul | 2006-03-10 16:37:23 -0800 (Fri, 10 Mar 2006) | 2 lines

Added full table.field qualification to the getWordMatchFormat() function.

------------------------------------------------------------------------
r1991 | ed | 2006-03-11 07:33:03 -0800 (Sat, 11 Mar 2006) | 2 lines

Removed the old code for importing cdxml files.

------------------------------------------------------------------------
r1992 | ed | 2006-03-11 17:56:25 -0800 (Sat, 11 Mar 2006) | 2 lines

You can now call addObject() and pass a cdxml file instead of a Dabo class reference, and the class defined in the cdxml will be added to the parent.

------------------------------------------------------------------------
r1993 | ed | 2006-03-12 17:12:02 -0800 (Sun, 12 Mar 2006) | 2 lines

Modified the class to handle property definitions.

------------------------------------------------------------------------
r1994 | paul | 2006-03-13 08:08:08 -0800 (Mon, 13 Mar 2006) | 2 lines

This should work around the double-scrollbar problem with the browse grid.

------------------------------------------------------------------------
r1995 | ed | 2006-03-13 16:46:49 -0800 (Mon, 13 Mar 2006) | 6 lines

Refactored the call to the command window from dApp to uiApp.

Fixed a bug in dGrid that would throw errors when a grid was either being created or destroyed, and the calls to paint the headers were out of sync with the current column count.

Fixed a bug in dSizerMixin that would always report the BorderSides property of an object as ['All'], even when it was set to only be specific sides.

------------------------------------------------------------------------
r1996 | paul | 2006-03-14 13:11:54 -0800 (Tue, 14 Mar 2006) | 1 line

Fixed a recursion problem with __getattr__ when running from the designer as opposed to runtime.
------------------------------------------------------------------------
r1997 | paul | 2006-03-14 14:42:02 -0800 (Tue, 14 Mar 2006) | 4 lines

This fixes the problem with dShell that no longer lets pdb run.

http://dabodev.com/tracker/0076 

------------------------------------------------------------------------
r1998 | ed | 2006-03-14 17:17:06 -0800 (Tue, 14 Mar 2006) | 4 lines

Cleaned up the dynamic code creation routines in dObject and DesignerXmlConverter.

Modified xmltodict to handle property declarations. After 0.6 is out, we really need to move to a more automatic way of doing this. I'd like to look into things such as cElementTree, which is supposed to be incorporated into the next verison of Python. Our files are not so huge that we couldn't parse them into DOM trees.

------------------------------------------------------------------------
r1999 | ed | 2006-03-15 04:29:28 -0800 (Wed, 15 Mar 2006) | 8 lines

Added setAfter() and setAfterInterval() to dabo.ui. These work the same as callAfter() and callAfterInterval(), except you use them to set properties to particular values.

Added the following properties to dGrid: MovableColumns, ResizableColumns, and ResizableRows. When any of these are set to False, the user cannot move/resize the column or row.

Re-arranged the property definitions to be alphabetical. 

Refactored all of the Dynamic* property calls to their own area after the property declarations. IMO, this makes the property definition section *much* easier to read, as it's easier to see each property defintion by itself, and find the one you want more quickly. If this is acceptable to you, Paul, I propose we adopt this as the standard in our property definition sections of code.

------------------------------------------------------------------------
r2000 | paul | 2006-03-16 08:38:35 -0800 (Thu, 16 Mar 2006) | 8 lines

Fixed the overflowing column problem in dGrid, which was happening whenever
the expression 'if fieldval' evaluated to False. IOW, None and empty strings.

Also fixed the grid to display None values using the value of the grid's 
NoneDisplay property. IMO NoneDisplay should default to 'None' instead of 
'<null>', but what does everyone else think?


------------------------------------------------------------------------
r2001 | ed | 2006-03-16 12:10:19 -0800 (Thu, 16 Mar 2006) | 2 lines

Reverted the IsEmptyCell() change, and added the overflow setting to the GetAttr() method, as per Robin's suggestion.

------------------------------------------------------------------------
r2002 | ed | 2006-03-16 12:14:52 -0800 (Thu, 16 Mar 2006) | 2 lines

Whoops, didn't mean to commit this file. It had some experimental stuff that will break anyone else's installation.

------------------------------------------------------------------------
r2003 | paul | 2006-03-16 13:23:00 -0800 (Thu, 16 Mar 2006) | 12 lines

Re-added the code to have the grid show None values using grid.NoneDisplay.

Refactored NoneDisplay out of uiApp and into dApp, since there isn't any
ui-specific code needed here. 

Made dGrid's NoneDisplay settable, and if set it overrides the dApp value,
otherwise it pulls dApp's value.

Oh, and I changed the default NoneDisplay to "< None >", because that is
my preference, but this doesn't really matter that much so if it really
bugs, feel free to change it to something else.

------------------------------------------------------------------------
r2004 | ed | 2006-03-17 16:19:20 -0800 (Fri, 17 Mar 2006) | 5 lines

Updated the class converter to properly handle nested class components. Components can be nested to any degree now, and inheritance will be preserved. 

There is a bug in the Save routine in the Class Designer, but that will have to be fixed another time.


------------------------------------------------------------------------
r2005 | ed | 2006-03-20 07:41:03 -0800 (Mon, 20 Mar 2006) | 2 lines

Removed the automatica clearing of self._types after every query. This reduces the number of error messages generated when queries that return zero records are run. If another query has already populated self._types, we can re-use that information. 

------------------------------------------------------------------------
r2006 | paul | 2006-03-20 10:13:34 -0800 (Mon, 20 Mar 2006) | 3 lines

This fixes the setFocus() problem noticed in the fieldValidation demo on
Mac.

------------------------------------------------------------------------
r2007 | paul | 2006-03-20 12:44:48 -0800 (Mon, 20 Mar 2006) | 22 lines

Continued the project of getting font behaviors and definitions 
encapsulated in dFont.

Set up an event so that the dFont instance can notify any 
controls that are using this font that the properties have changed.
This is dEvents.FontPropertiesChanged.

Modified the various font property getters/setters in dPemMixin,
dTreeView, and dGrid to better define and use the dFont instances. 
Previously, a new dFont instance was getting created simply by 
querying any of the font properties. Now, we create and reuse the 
dFont instance and use it as a full proxy to the wxFont object. 

Removed the NativeObject property, as it isn't necessary for user
code to access this directly. They can still get to it using the
_nativeFont attribute, however.

I'll commit this change and see if the dynamic prop demo works 
correctly on Mac now. If not, I've got a better base from which to
fix the problem now.


------------------------------------------------------------------------
r2008 | ed | 2006-03-20 14:26:38 -0800 (Mon, 20 Mar 2006) | 5 lines

Ran into a problem with browsing a data set containing an mx.DateTime value. Since it
wasn't one of the defined types in setColumns, it was being stored as a data
type, not a string. Later on, code in fillTable() tried to lower() that
value, throwing an error. This fixes this problem.

------------------------------------------------------------------------
r2009 | ed | 2006-03-20 14:33:52 -0800 (Mon, 20 Mar 2006) | 2 lines

Corrects a problem introduced by the change to setFocus() earlier today. Occasionally, objects were being released after their setFocus() method had been called, and when the callAfter() happened, it threw a dead object error. This wraps that call in a check to make sure that the object is still live.

------------------------------------------------------------------------
r2010 | paul | 2006-03-20 14:44:54 -0800 (Mon, 20 Mar 2006) | 1 line

I put together a wx sample that mirrors what dabo does when changing font properties. I'm going to test the behavior on Win and Linux and then post a query to wxPython-mac.
------------------------------------------------------------------------
r2011 | paul | 2006-03-20 14:49:55 -0800 (Mon, 20 Mar 2006) | 2 lines

Tested on Linux, and it works as expected. Here are some minor improvements.

------------------------------------------------------------------------
r2012 | paul | 2006-03-21 07:53:58 -0800 (Tue, 21 Mar 2006) | 1 line

Fixed the mac font problem. The dynamicProps demo now works as expected on all platforms.
------------------------------------------------------------------------
r2013 | paul | 2006-03-21 08:59:43 -0800 (Tue, 21 Mar 2006) | 1 line

Changed the keyboard datanav navigation from Ctrl+, and Ctrl+. to Alt+LEFT and Alt+RIGHT. I've confirmed this works on Win and Gtk. Will test Mac next. The original configuration, in addition to being nonintuitive, didn't work on Windows.
------------------------------------------------------------------------
r2014 | paul | 2006-03-21 09:28:52 -0800 (Tue, 21 Mar 2006) | 1 line

Added another macProblem script, this time showing that some arrow keys don't get properly bound.
------------------------------------------------------------------------
r2015 | paul | 2006-03-21 09:33:48 -0800 (Tue, 21 Mar 2006) | 1 line

set native line endings.
------------------------------------------------------------------------
r2016 | paul | 2006-03-21 09:37:06 -0800 (Tue, 21 Mar 2006) | 1 line

Argh, the test on Windows failed because evt.EventObject() returns the frame and not the menu like it does on Mac and Linux. This should do it.
------------------------------------------------------------------------
r2017 | paul | 2006-03-21 09:41:51 -0800 (Tue, 21 Mar 2006) | 1 line

Changed the nav keys to Ctrl+LEFT/Ctrl+Right because Alt+arrow on Mac translates to the Option+Arrow which is used for keyboard navigation of text entry fields. Note that because of a separate problem, only forward keyboard navigation is possible on Mac currently.
------------------------------------------------------------------------
r2018 | paul | 2006-03-21 09:49:06 -0800 (Tue, 21 Mar 2006) | 4 lines

Ok, using Ctrl+Arrow on Win and Lin causes the same problem that using
Alt+Arrow causes on Mac. Therefore, I've added code to use the best alt
key on the running platform.

------------------------------------------------------------------------
r2019 | paul | 2006-03-21 10:35:02 -0800 (Tue, 21 Mar 2006) | 4 lines

I was getting errorLog messages for datatypes of "char", "decimal", "date", 
and "datetime", as these types were as defined by the appWizard using 
fieldSpecs. Fixed it by inserting these strings as keys in the dictionary.

------------------------------------------------------------------------
r2020 | echo | 2006-03-21 11:52:14 -0800 (Tue, 21 Mar 2006) | 2 lines

lots of impovements for creating tables.
using dAutoBizobj's make it much easyer now and do some automation of setting up the bizobj.
------------------------------------------------------------------------
r2021 | paul | 2006-03-21 12:36:29 -0800 (Tue, 21 Mar 2006) | 2 lines

Reverted my change from before, and fixed the test expression.

------------------------------------------------------------------------
r2022 | paul | 2006-03-21 15:23:17 -0800 (Tue, 21 Mar 2006) | 2 lines

Added the objects collection to report bands by default.

------------------------------------------------------------------------
r2023 | ed | 2006-03-21 17:41:20 -0800 (Tue, 21 Mar 2006) | 6 lines

Added the ability to save screenshots in one of several graphics formats. While this was part of the Bubblet demo originally, it could have uses elsewhere. For example, combining this with dabo.ui.callAfterInterval() would enable timed screen shots.

Screenshots can be of any object. If no object is specified, the active form is used.

In order to detect which graphic format was selected, the various file dialog methods have been augmented with similarly-named methods that also return the type selected by the user. For example, calling getFile("jpg", "png") simply returns the path to the selected file. But calling getFileAndType("jpg", "png") returns a 2-tuple: the first element is the path, and the second would be either "jpg" or "png", depending on which of the wildcard types was selected by the user.

------------------------------------------------------------------------
r2024 | echo | 2006-03-21 22:06:57 -0800 (Tue, 21 Mar 2006) | 1 line

forgot to uncomment some code during testing.
------------------------------------------------------------------------
r2025 | ed | 2006-03-22 07:13:13 -0800 (Wed, 22 Mar 2006) | 2 lines

Turns out that some of the adjustments needed to properly capture a form were Mac-specific, and were not needed on Windows. This accounts for that difference. Next, on to test on Gtk!

------------------------------------------------------------------------
r2026 | paul | 2006-03-22 10:28:49 -0800 (Wed, 22 Mar 2006) | 5 lines

Reverted commits 2024 and 2020. There are problems with saving that need to
be explored. After 0.6 is tagged, Echo please re-commit your changes so that
we can figure out what was wrong.


------------------------------------------------------------------------
r2027 | ed | 2006-03-22 11:18:56 -0800 (Wed, 22 Mar 2006) | 9 lines

Fixed  a bug in dabo.ui.saveScreenShot() that only happened if you passed
both the path and imgType.

Hacked a bit to get getCaptureBitmap() to work well on GTTK, but it's still
a bit of a mess. GTK doesn't capture the title bar, menu bar or frame
decorations of a window, and I tried to compensate the sizing accordingly.
Individual controls don't seem to work at all. I don't have more time to
play around with this now, but this is hardly a show-stopper for release.

------------------------------------------------------------------------


Dabo 0.5.1 (2006-01-25) (Revision 1860):
Additional MDI/SDI improvements and fixes. By default, dForm on Windows will be a MDI child.

Fixed PageFrame background color to take the background color from the form, not unconditional white. Only on Windows - Gtk and Mac do the right thing by default.

Fixed various issues with getting icon files and converting them to bitmaps.

Set the default grid font to Arial,9 on Windows, as the wx-default was just plain ugly.

Added getPositionInSizer() method to sizers, since they may also be contained within sizers.

Reworked dShell. Now it appears as a split window, with the standard command area on the top, and the output in the lower pane.

Changed dGridSizer to raise an exception if the insert method is called instead of just returning False.

Added SashPositionChanged event. Updated dSplitter to raise this event when the sash position changes.

Added scrollToBeginning() and scrollToEnd() methods to dEditBox.

Added pass-through properties for dSplitForm's splitter's panels.

Added the property 'SplitState' to the dShell class. By right-clicking on the shell, you can toggle between the new split behavior and the "traditional" single pane behavior.

Added a right-click menu to the output pane. Right now all it can do is clear itself, but we could add other stuff such as font selection, etc.

Fixed a bug in uiApp that prevented Cut(), Copy() and Paste() from working in the shell (and other non-Daboized controls that only have wx versions of these methods).

Added a menu command to the shell to clear the output window using Ctrl-Backspace.

Added the MenuOpen event to dEvents. This allows us to create dynamic menus by intercepting this event and updating the prompts of the menu items as needed. Added the event data code to save the prompt and menu object that triggered the event.

Added 'deadObjectException' as an alias to wx._core.PyDeadObjectError to the dabo.ui.uiwx module. This will enable Dabo code to handle this condition without having to use wx code.

Added a bunch on internationalization to the dShell script.

Made the dMessageBox titles come from Application.getAppInfo(appName) by default.

Added handling for situations where a bizobj is used with a data connection.

Added a sizeToColumns() method. This will set the width of the grid equal to that of its component Columns.

Fixed copy to clipboard in about.py to use CRLF on Windows.

Added new properties to grid:
	HorizontalScrolling
	VerticalScrolling
	ShowColumnLables
	ShowCellBorders

The scrolling properties are booleans, and will hide/show the scrollbars.

Fixed some problems with setting the column's Width. For a number of reasons, when you created a grid from scratch and then added columns using addColumn, the columns widths you'd specify weren't being respected. Fixed.

Moved the code for the dEditor class from ide/dEditor.py into its own uiwx-level class. This will allow other apps (I'm thinking Designer here!) to instantiate code editors where they need.

Revamped the layout of the dOkCancelDialog class to create the panel and sizer that is needed in addControls().

Cleaned up some of the default spacing so that with AutoSize=True, the form still looks OK.

Removed the split sash code from the dEditor. That stuff belongs in the form the editor is located, not in the editor itself.

Fixed a bug in dGrid that only seemed to pop up when the grid was located on a form with a bizobj but that wasn't a dForm. The presets dialog in minesweeper fit that description, and it was throwing errors when you navigated through the grid.

Added methods for getting/setting the back color of individual items.

Added property CellHighlightWidth to dGrid, and used that property in the about dialog.

Made dPanel.addControls() better behaved.

Reworked/improved the Quick Report dialog in datanav.

Updated dPageFrameNoTabs to raise the same events as the 'tabbed' versions do. Added a 'getPageNumber()' method.

Added PNG files for rotating images clockwise and counter-clockwise.

Improved dImage to support 90 degree rotation in either direction. Added rotation to the the demo.

Fixed a bug in dListControl's StringValue prop, and any other place where the framework was trying to call the control's GetString() method, since it doesn't have one.

Added SearchDelay property to dApp, which becomes the default SearchDelay for dGrid. The dGrid SearchDelay can get set to any int but that won't override the dApp setting. If dGrid.SearchDelay is set to None (the default), that is when the dApp setting gets used. Set the default SearchDelay to 300 - better than the previous 600 IMO but still not too fast. Eventually, when we provide a default system preference screen, we should expose this property for the user to tweak how they like.

Cleaned up and consolidated lots of stuff in dGrid, which shouldn't have any effect on runtime performance. Made SameSizeRows into an actual property.

Using the standard button sizer in the okay/cancel dialog is good, because it lets wx handle the platform-convention rules. However, even though it handles rearranging the order of the buttons as needed, it doesn't rearrange tab order. So I added code to do that.

Reworked the login dialog to subclass from dOkCancelDialog.

Reworked dGrid to sync the rowcount in refresh() calls. Fixed bug in syncing of column counts.

The entire populate() cycle was happening every time you entered the browse page in datanav apps, when in reality the only thing you need to do in current dGrids when the dataset has been requeried is a simple refresh().

Added an initial call to _clearDocument(), which is where all the defaults are set for the editor. The DesignerEditor would not indent properly without this.

Added moveToBeginning() and moveToEnd() methods to position the pointer at the beginning and end of the document, respectively.

Added functions to dBizobj, dCursor, and dBackend to get the data structure from the cursor description, instead of querying the backend based on a table name. This is more likely to contain correct information, but will need work for other backends besides MySQL. Also, getting the pkid is still problematic - but IMO it isn't a big deal to just have the user tell us which field to use as the PK.

Fixed dGrid's buildFromDataSet() to use the new function so it will work even if the bizobj has no records at the time of creation.

Fixed dGrid.sort() to not care if sort is done on an empty bizobj. Added the logic to restore code saved in the Designer so that it functions properly in the re-created form.

This is big - really big. For the first time, you can create a form in the Designer, add code to be bound to events, or create custom methods, and that code will work in the form created from the .cdxml file exactly the same as if you had written those methods in a regular .py script.

Improved the card deck pictures.

Fixed some problems in the Icon setter that would cause errors if None was passed, or if the icon path didn't exist, as would be the case if you were running with py2exe and didn't include the icon files as resources.

Added a significant change to eventMixin.py's auto event binding logic. The code now first looks at the object itself before looking up its family tree. This is critical for the event binding when running a cdxml file, where methods are added to the object at runtime, and are not present in the class definition.

Cleaned up some spacing in dEvents; also fixed some "appliesToClass" logic that had events 'applying' to incorrect classses. There are still some anomalies, I'm sure; the event listing in the Designer will reveal these.

Modified the dynamic code binding to fix the problem with modifying the object's class definition in the current namespace. Also fixed a problem where code for dPage objects was not getting assigned.

Fixed a bug in the dListControl's _getValue() method when there were no items in the list.

Added alias 'dragging' for 'mouseDown' in the EventData for mouse events.

Added method 'getMousePosition()' to dPemMixin. This returns the mouse position in relative coordinates to the object that called it.

Added 'drawBitmap()' method to dPemMixin. Like the other wx.DC drawing methods, this wraps the wx.DC.DrawBitmap() method into an object interface that Dabo objects can use.

Changed getSQL() so that if no FROM clause has been specified, it defaults to a FROM clause using the cursor's Table.

Addedproperties SettingsFileName and SettingsDirectoryName to the app's UserSettingProvider. The defaults for both come from app.getAppInfo("appShortName"), and determine the name of the directory and file name of the user settings file. The directory name will be lower()'d and have a '.' prepended automatically.

Created the dFoldPanel and dFoldPanelBar classes, which wrap the built-in wx.lib.FoldPanel classes. Modified __init__.py to include these, and added some hacks to dPemMixin to enable them to work with the event structure.

Added the dCalendar control. This wraps the wx.calendar.CalendarCtrl, making it simpler and more Pythonic to work with.

Added a setting 'firstDayOfWeek' to dabo.settings

Moved the method _getWxColour() from dFoldPanelBar into dPemMixin, as it is needed in both dFoldPanelBar as well as dCalendar, and possibly other wx controls that expect a wx.Colour object instead of a color tuple.

Added the calendar events and their processing.

Added a form subclass named 'dBorderlessForm'. This creates a form with no visible border or title bar. Renamed the base form class in dForm.py from 'dFormBase' to 'BaseForm'. I felt that the 'd' prefix was misleading, as it isn't meant to be a Dabo base class at all.

Updated dDateTextBox to use regular datetime values internally instead of wx.DateTime. Updated the calendar to use the new Dabo dCalendar instead of the raw wx version.

Added row and column highlighting to the dGrid class. Default is to only show the selected cell, but that can be changed by setting the SelectionMode property to either "rows" or "columns". The color used to highlight the selected row/col is controlled by the new SelectionBackColor and SelectionForeColor properties; defaults are yellow background and black text.

Added a GridRangeSelected event to dEvents, and added the code to raise it to dGrid.

Changed the default SelectionMode for the datanav grid to 'row'.

Added some additional properties and functionality to the dFoldPanelBar class. First is the 'Singleton' property, which controls a behavior in which one and only one panel is open at any time. Expanding a different panel collapses the currently open one, and attempting to collapse the expanded panel does nothing. 

Second, there is a 'SingleClick' property that controls whether you need to double-click on a panel's caption bar (default behavior) to toggle it, or whether a single click will suffice.

Finally, the 'CollapseToBottom' property determines whether any collapsed panels are positioned at the bottom of the control, or whether they remain in their natural position.

I added the FoldPanelCaptionClick and FoldPanelChange events to dEvents in order to implement these features. They are available to instances of the dFoldPanelBar class for hooking additional behaviors to these events.

I updated the test form for dFoldPanelBar to enable you to play with these settings.

Fixed a bug in dGrid's new SelectionMode property. I had previously checked for only 'r' or 'c' at the beginning of the setting, forgetting that 'cells' is a valid setting, so I fixed that to check the first two letters.

Added the property 'AlternateRowColoring' to dGrid. When True, rows in the grid will be colored depending on the RowColorOdd and RowColorEven properties.

Changed the datanav grid to use alternate row coloring.

Added some changes to the column Width setting that were necessary for working correctly in the Designer.

Fixed a bug with MultipleSelect in the dTreeView class. Added some navigation methods for returning adjacent nodes. Fixed a selection bug when working with MultipleSelect=True.

Added code to properly escape characters that should not be in XML attributes. Also cleaned up some uneven spacing in the created XML.

Fixed a bug in dGrid that didn't allow the ColumnCount to be reduced.

Fixed a bug in dPage that happened when the page was instantiated separately from the pageframe, since it wasn't yet in the Pages collection.

Added 'dEditableList', which is a wrapping of the wx.gizmos.EditableListBox. This control takes a list and allows the user to add/edit/delete items from the list, as well as re-order them. There are properties to enable/disable any of the following: edit, add, delete, order. All are enabled by default.

Fixed a bug in dGridSizer. Apparently, calling 'AddGrowableRow/Col' multiple times increments an internal counter, and a subsequent 'RemoveGrowableRow/Col' will only decrement it, and will not set it to be not growable unless the counter has dropped to zero. Now setting a row as growable won't do anything if it already is.

Added the drawText() method, along with the text draw objects.

Added columns to reportWriter. Added smarter sorting of elements in the xml output, for instance putting the report title up top instead of on bottom, and putting the bands in order that they appear and not alpha order.

Changed all the sizer routines to return the SizerItem managing the object that was just added to the sizer.

Sizer.Children now modified the SizerItem objects to include a 'ControllingSizer' attribute that references the parent sizer.

Modified the dFoldPanelBar class to better time its refreshes. It's still a bit funky, but does seem to work better.

Modified dFormMixin to handle the new Spacer panels correctly.

Added a 'Children' property to dFoldPanelBar that returns the child panels, instead of the layout panel that it uses to manage the visible panels.

Added a return value to setItemProp() in the sizers so that we can tell if a value was successfully applied.

Fixed the problem with propertyHelperMixin.getPropertyList(): it was caching the list of properties across the class hierarchy, instead of caching just for this one class definition. Good catch, Ed!

Wrapped the wx.CheckListBox for Dabo.

Changed the parameter to sizer for setting the sides that the Border property applies to from 'borderFlags' to 'borderSides', as this seems much more appropriate. Updated the sizers to properly get/set this prop from a list of values.

Changed all hard-coded "\n" in dicttoxml to the more crossplatform idiom "%s" % os.linesep.

Fixed a problem whereby nested sizers did not get their Parent property set. Thanks to Casey McGuire for catching this bug.

Added the GridCellEditBegin event, which is raised when a grid cell editor is shown. This allows you to record the value of a cell before it is modified by the user.

Added StayOnTop property to dFormMixin.

Added ShowMenuBar property, so I can avoid showing the Dabo menubar on my property sheet and object tree forms.

Added groups and variables elements to a newly created report form.

Changed the default position to (-1, -1), since (0, 0) places the form under the menu bar when running on OS X.

Fixed a problem with dGrid on Windows where the propsheet was stealing the focus

Added ForegroundColor and BackgroundColor to dColumn. These props apply to all cells in a column that don't have custom renderers.

Fleshed out the 'nextNode()' and 'priorNode()' methods to provide true flat navigation through the tree. Also cleaned up several other methods that dealt with nodes and their objects.

Added font properties to treeview nodes.

Wrapped the wx.Font object into dFont. This breaks the font editing on the PropSheet, and possibly a few other places that use the font prop, but we'll have to find those afterwards. All previous references to Font have to be changed to GetFont() instead; likewise, all assignments to Font must be replaced with calls to SetFont().

Revamped the internals of dFont.

Added 'defaultFontSize' to settings.py

Updated the font handling in dGrid and dTreeView.

Cleaned up some spacing in dLabel.

Added the default wx IDs to the About and Quit menu items so that they appear in the proper place on OS X.

Updated the long-neglected BorderSizer class, which wraps the wx.StaticBoxSizer class. You can now pass either a pre-made dBox object to the constructor, or pass a parent object, and the constructor will create the box for you.

Added a Caption property to dBorderSizer. This will update the caption displayed on the sizer's box.

Refactored the getItemProp() method so that dBorderSizer will use the same functionality.

Added getAvailableFonts() method. Returns a list of all font faces installed on the current system.

Updated dFormMixin to handle dBorderSizer objects in .cdxml files

Changed the prompt and shortcut for the 'Quit' item in dBaseMenuBar to be 'Quit' and 'Ctrl-Q' on all platforms.

Added additional properties to dBorderSizer that are basically proxies to the box's caption.

Added a Dabo wrapper for wx._core._wxPyDeadObject.

Added a couple helper functions for converting between 0-255 rgb
format and 0-1 format.

Added basic MRU (Most Recently Used) capabilities to Dabo. I had looked at the wx.FileHistory class, but it seemed a bit too rigid to work with our design. To use MRU in a menu, the menu should be created by passing 'MRU=True' in the constructor.

Added Variables, Groups, and Objects as ReportObjectCollections. 

Changed dEvents.ContextMenu to derive from Event instead of MenuEvent, since the contextmenu event is a request for a context menu to be displayed, and not generated from any existing menu.

Added an addObject() function to report objects. Changed the sorting of report elements so that Variables appears before Groups. Fixed a bug which sometimes kept variables and groups from getting their xml generated.

Modified xmltodict to properly escape any internal ampersands.

Modified the Quick Report (list format) to generate the report form not by crafting the XML by hand, but by using the object interface and then finally having the report writer return the XML. This results in quick reports getting the same XML format as if the Designer were used.

Added the dHyperLink control. This is a wrapped version of the wx.lib.hyperlink.HyperLinkCtrl.

Added a new function to dabo.ui, callAfterInterval(func, interval). It will call the passed function after the interval has elapsed. Additionally, if callAfterInterval() is called again with the same function before the original timer had elapsed, the old timer is destroyed and the new one instantiated, making the function only run once, after a timer finally reaches the interval.

Added 'removePage()' and 'cyclePages()' functions to the dPageFrameMixin class. The former allow for a specific page to be removed, while the latter accepts an integer value and cycles the selected page forward (positive) or backwards (negative).

Added a clear() function to dMenu() for removing all current items.

Thanks to Brandon Singer, I've fixed a problem where passing kwargs to the constructor of any dObject subclass would silently pass any unhandled kwargs. The fix to the base problem was easy, but it turns out lots of our code was relying on this. I fixed the obvious places (code that gets run from dabo/ui/uiwx/test.py) but I suspect I've missed a few. If you get the exception:
		TypeError: __init__() got an unexpected keyword argument '<argument>'
then it is due to this fix.

The minesweeper demo uses dabo.fastNameSet when creating the squares, and it turns out that when fastNameSet is True, autoBindEvents() doesn't run. Fixed.

Fixed dApp to raise the Activate/Deactivate events properly. Fixed dApp to raise Key events. The app gets key events if no window has stopped the event along the way. So now we can dApp.bindEvent(dEvents.KeyChar, func). Fixed dApp to autoBindEvents().

the menutype keyword can now be used to specifiy about, exit and preferences menu item. Dabo will then automatically use the correct wxID, so the menu items are automatically moved to the MacOS application menu.

Modified colorTupleFromName() to also attempt to interpret strings as HTML-style hex values.


Dabo-0.5 (2005-11-30) (Revision 1610):

Added a new class, DataSet, which lets you issue sql queries against local
Dabo data, not just against the backend. You can query, sort, and update
individual DataSets, and even join multiple DataSets - all without making a
call to the backend database server. 

Began the work of making an embedded, internal, database engine (SQLite).
Starting with future releases, SQLite will be an integral part of Dabo.

Improved the autoBindEvents() to bind to matching methods in all parent
containers, not just the form. Auto-binding of events now works so well that
it is the default; you no longer have to manually call it. This is now
*really cool*.

Added a basic framework for drawing shapes on any window. Once created, the
shapes are accessible with an object reference. This should make dealing with
DC's a thing of the past for most uses. Way cool!

Sorted out MDI/SDI issues. By default, dForm on Windows MDI children and
dFormMain on Windows will be MDI parents. On other platforms, both dForm and
dFormMain will be SDI by default. The above statement is true for datanav
applications (ones generated by the AppWizard). The pure-Dabo default is for
SDI forms. In any case, you may change this by setting dabo.MDI.

Improved the datanav Quick Report feature, which can print a list of the
current records, mimicing the browse page, or a whole page of information on
one record, mimicing the edit page. Added the ability for the user to save
the generated report form for editing with the Report Designer or editing the
rfxml directly.

Improved showContextMenu(), and sorted out the difference between
MouseRightClick and ContextMenu events.

Fixed bug in Find dialog which would segfault on Windows and Mac. Added
replace functionality.

dCheckBox now supports 3 state mode, (True, False and None).

Fixed bug in dbMySQL that would interpret longtext or longblob fields as
ints.

Fixed dBackend to properly send Python None values as NULLs.

dForms now know how to read in cdxml files, created by the upcoming UI
Designer.

Fixed a bug in colorTupleFromString() that failed to return the correct
value.

Fixed some encoding issues with dReportWriter. 

Added some handling for broken database connections.

Added some useful properties to dTreeView that improve its display and
editability. 

Fixed some problems with the Hit event and dSpinner.

Improved report writer's paragraph handling.

Further removed user code from direct wx access in a few places. User code
can still get at the wx structures though, just not quite as easily.

Fixed mixed indentation problems, made some code cleaner, and added/edited
lots of docstrings. 

Added some useful functions to dMenu to remove items and get references to 
menu items. 

Added a DynamicEnabled property to dMenuItem. Set this to a function which 
will get run when the parent menu is shown to determine whether the menu
item is enabled or not. 

Menu.Children will now contain object references to Dabo menus and menu
items.

Improved dToolbar somewhat, in anticipation of fully objectifying the
individual toolbar items. The ultimate goal is for the interface to
a dToolbar to be similar to that of dMenu.

Fixed some problems in dBizobj that make working with multi-table select
statements more sane.

Fixed a bug in dGrid which resulted in very slow deletion of rows, for
instance
after requerying the recordset and getting fewer rows that were in the grid
before.

Added properties ShowInTaskBar and FloatOnParent to dForm, and actually
made the following properties work: ShowMinButton, ShowMaxButton,
ShowCloseButton, ShowSystemMenu, TinyTitleBar.

Added a picklist mode to datanav Forms, showing only the select and browse
pages for a user to pick a record. The form dismisses on escape, and returns
the selected row's pk on enter.

Handling of None values in many UI controls, the bizobj, and the database is
much improved.

Added middle button and scroll mouse events.

Added some hooks to datanav.Form that allow developers to control the
select options for given fields. This would allow you to put, for example,
a radiogroup with a few choices instead of the default textbox.

Added connection manager to dApp, which maintains a set of open database
connections that your forms can reference by name. Added Connection property 
to dForm.

Fixed bugs in and improved dSplitter, dListControl, dControlItemMixin, and
dListBox.

Phwew! All that in 7 weeks.



Dabo-0.4.2 (2005-10-07) (Revision 1418):
Added PrimaryBizobj property to dForm, which can replace calls to getPrimaryBizobj().

Added Accepted property to dOkCancelDialog, which gets set automatically if the
user pressed "OK".

Added AutoSQL, UserSQL, CurrentSQL, LastSQL properties to dCursor and dBizobj.
When time to requery, the SQL will come from UserSQL if set, or AutoSQL will
be regenerated. 

Fixed a bug that kept changes to a new record from getting committed.

Added DefaultValues property to bizobj.

Added ListSelection and ListDeselection events to dListControl. Added properties
MultipleSelect, HitIndex, LastSelectedIndex, HeaderVisible, HorizontalRules,
and VerticalRules. Changed the behavior of both dListControl and dListBox so that merely selecting an item doesn't raise the Hit event; instead, it raises a ListSelection event, and if another item had been previously selected, it raises a ListDeselection event. Hit is only raised from double-clicking on an item, or by pressing Enter.

Added new property to dTextBox: StrictDateEntry. Changed the code for
interpreting dates entered by the user to allow for some less explicit
formats (YYYYMMDD, YYMMDD, and MMDD). If StrictDateEntry is False (the
default), these other formats will be used when interpreting dates
entered by the user.

Added field-level validation to the framework.

Improved support for decimal.Decimal, both at the database level and in
dTextBox.

Added new auto event binding, which automatically binds events based on any
defined callback functions. For example, if you have a method onMouseEnter()
defined, the dEvents.MouseEnter will automatically be bound to that method.
Inspired by PythonCard.

Added RegID property to forms, that allows for object registration
with the form. Not all objects require RegIDs, but if they have one,
they must be unique among all objects in a form. A reference to that
object can then be gotten from any other object by calling
'self.Form.getObjectByRegID(<regid>)'.

Linked RegID to the auto event binding, so that if a form has a method
of onHit_cmdOK(), and has a button with a RegID of 'cmdOK', the
cmdOk's Hit will get bound to the form's callback, automatically.

Improved dGrid and dColumn. Many properties added, and you are now in much
finer control over the display of grid column headers, grid cell attributes,
grid cell editors and renderers, and the grid itself. 

Began work of allowing case-insensitive property values for properties that
take string values, and for properties that take a limited number of values
where the first letter is unique, you can set the property by just using the
first letter. dTextBox.Alignment = "c" sets the property to "Center", for 
example.

Modified dBizobj, dCursorMixin, and dBackend so that the user can specify 
the Unicode Encoding to use. Changed the default encoding from latin-1 to
utf-8.

Added feature to optionally draw sizer outlines on any form that uses dSizers.
This is currently accessible via an option in the View menu when the base
menu bar is in use, or you can turn it on/off programatically.

Grids now remember the column that is sorted, and resort when next instantiated.

Added support in dReportWriter for report groups and report variables, and 
dynamic band heights (based on the height of contained objects). Added showExpr,
which is an expression that evaluates at runtime and if true, shows the object
in the report, and not if false. 

Improved the automatic print preview report format in datanav. It now:

	+ prints column headers

	+ mirrors the font size, column width, cell vertical and horizontal
	  alignment, and column height of the grid

	+ mirrors the font size, header height, vertical and horizontal 
	  alignment of the grid headers

	+ automatically reorients to landscape if the detail flows beyond the width
	  of portrait

	+ stops printing more columns if doing so would result in overflowing the
	  right margin

Key bindings are now case-insensitive.

Improved docstrings and API documentation.


Dabo-0.4.1 (2005-08-30) (Revision 1226):

Improved test framework for uiwx. Now you can run ui/uiwx/test.py and get
almost all of the dabo controls in one form, and they are the same tests 
that you get when you run an individual control directly.

Factored out the saving/restoring of user settings out of dApp into 
the separate dUserSettingProvider class, which can be subclassed or
overridded by the developers. Added properties UserSettingProvider
and UserSettingProviderClass to dApp. 

Dabo user settings are no longer saved to .userSettings.ini in the app
directory, but are saved to the user's home directory (in ~.dabo/) or
if on Windows, in <User Profile>/Application Data/Dabo/.

Support for SQLite added. As of this moment, Dabo supports several major 
open-source database backends: MySQL, PostgreSQL, Firebird, and SQLite.
Next on the list should be Oracle, Sybase, and MS-SQL.

Started work implementing a Quick Report in the datanav library, which 
replaces the old HTML Print Preview. This uses the fledgling Dabo Report
Writer to create a PDF rendition of the dataset. 

Added new property for all controls: StatusText. When set, and when the 
form has a status bar, that text will show in the form's status bar when
the mouse enters the control. 

Expanded the dabo.ui.strToBmp() function to accept an optional scale factor
or width/height values. If they are passed, the returned bitmap image is 
sized to those values.

Added an optional parameter to the bizobj and cursor's getDataSet() method.
If you send a list of field names, only those fields are returned. 

Fixed some lingering bugs in the dabo.ui.uiwx package and the datanav
lib. dWizard works better now. Improved dGauge, dLine, dBox, dRadioBox, 
dListBox, dToolBar, and dSizers.

Added simple decimal support to dTextBox.

Work continues on dGrid, specifically dColumn is now better worked 
into the "Dabo Way".

Added dabo.trace() function, that will drop you into pdb.

dConnectInfo reworked to have better property names.

Removed dependency on PIL and reportlab from Dabo. These are dependencies
still, but only if you try to run a report.

Added dabo.lib.StopWatch.StopWatch class, which is a light Python 
stopwatch with start(), stop(), reset() methods and Value property.

This is a partial list. Both Ed and Paul have been very busy with Dabo
since 0.4 a few weeks ago. Lots of bugfixes and enhancements were made,
and we encourage everyone to upgrade.


Dabo-0.4 (2005-08-08) (Revision 1132):

Cleaned up the initialization of properties. No more initStyleProperties();
user code just puts their props in initProperties() or sends them to the
constructor in the properties arg or as separate named arguments. The
framework sorts out when the properties need to be set in the object
construction cycle.

Improved sizers by separating out the Halign and Valign properties, 
eliminating the need to use the 'alignment' flags parameter. Added the 
'Parent' property, making it easy to reference the control that 'owns' 
the sizer. Also added the convenience method 'append1x(item)', which is 
shorthand for writing 'append(item, 1, "expand")', since it is used so 
frequently. The grid sizers now have 'isRowGrowable()' and 'isColGrowable()'
methods for checking the status of any row/column.

New dGrid, with dColumn and Header objects available for reference.

Lots of convenience functions written, such as those designed for simplified 
access to common dialogs, are now built into the dabo.ui module. Examples: 
getFile(), getColor(), getBitmap(), and the getString() functions, which all 
create, show and destroy the required dialog window, and then return the 
result. So, to present the user with a font selection dialog, just call 
dabo.ui.getFont(), and the selected font will be returned (or None if they 
canceled). Similarly, to show a common messagebox and get the response, 
just use dabo.ui.info(), dabo.ui.stop(), or dabo.ui.areYouSure(). 

doDefault() much faster now (thanks to Alex Martelli)

Support for decimal.Decimal.

New classes: dColorDialog, dToolBar.

Work on the report writer and report designer progresses. The report designer
is now in the daboide project, not here in dabo anymore.

We finally have distutils support. To install Dabo, do the standard
"python setup.py install". Thanks to limodou for submitting the patch.


Dabo-0.3.2 (2005-03-21) (Revision 959):

Work continued on the Dabo report writer and report designer. The
writer will now read and write the rfxml file format, and will do some 
simple reports. The designer will edit the rfxml files, again, with simple
formats. This isn't ready to use yet but the foundation is in place.

cursorToXML() added.

Encoding property added to databases.

dBitmap introduced.
dWizard introduced.
dTreeView introduced.

dGrid is being refactored, and is almost done. For a short time, it can
be found as dGridX.

We worked hard trying to get window closing not to segfault on Windows, 
to get icons to display correctly on Mac, and to optimize Dabo in some key
bottleneck areas. We've greatly improved Dabo's performance on all platforms,
and Dabo now behaves less differently on each platform.

Improved data binding: controls don't need to bind to a bizobj, but to any 
object expression.

Improved Firebird and PostgreSQL support.

Lots of improvements and bug fixes, in all three tiers.


Dabo-0.3.1 (2005-02-16) (Revision 802):

Separated creation of dCursor from dBizobj.
Added option to automatically create a dPanel in dForm.
Further Daboized dListControl.
Fixed display of a few of our icons on Mac.
Added bindKey() method, which binds a keycombo like "Ctrl+D" to a function.
Daboized dMenu, dMenuItem, and dMenuBar.
Minimal Tkinter (dCheckbox) working again (testing only).
Added ActiveControl property to dForm.
Various dSizer improvements were made.
We moved various things to better places in the source tree.
Connection info now saved in XML format.
Localization framework added. Courtesy Vladimir Sekissov.
Added Children property, which contains a list of a container's children.
dCommandButton is now known as dButton.


Dabo-0.3 (2005-01-10):

New UI controls added:
    dFileDialog.py
    dListBox.py
    dListControl.py
    dSplitForm.py
    dSplitter.py

GridSizer added. Method calls to all sizers greatly simplified.

Menus simplified, removing wx-specific calls.

My favorite UI debugging tool: getMouseObject()

Framework classes now consistently use the standard initialization 
methods: initProperties, initEvents, etc.

Child requeries and transaction support added to bizobj

Bizobjs now support the relationSpecs.rsxml format for adding child 
relations.

Support for fulltext-type searches by word added.

Auxiliary (one-shot) cursors added to main cursors for better support 
of different backends.

Improved unicode support in cursors.

Added support for PostgreSQL. Added template to ease creation of new 
backend support scripts.

appWizard: added support for parent/child/grandchild/... relationships; 
improved FieldSpecEditor.

appWizard/dDataNav* classes:
    changed all wx.Sizers to dSizers
    added "-ignore-" to visually indicate search criteria that will not be used
    added save/restore of values on search page.
    added 'Matches Words' option for fulltext searches
    fixed bugs with searches for boolean values

Controls:
    Now auto-name themselves. Unique name enforcement added.
    Added _IsContainer attribute to distinguish controls that can add other controls to themselves.
    Added support for setting colors by name instead of RGB tuple.
    Fixed resizing bug that would not allow a resized object to be made smaller.


Dabo-0.2 (2004-09-20):

Continued improving FireBird database support, improved MySQL support. Added
preliminary SQLite support.

Save passwords encrypted.

Added logger objects to send program output to, instead of directly to stdout.

Began abstraction of Tkinter at purely an experimental level.

Added some new controls, such as a better date control and a combo box. 

Brought in some Foxpro string functions from the openfox project.

New event model, greatly simplifying the binding of events, the raising of events,
and the subclassing of events to define new events.

Added preliminary unicode support to the cursor level. 
	

Dabo-0.1.1 (2004-06-13):

Dabo-0.1 (2004-05-10):

