See the Subversion log for all the details.

Dabo 0.5.1 (2006-01-25) (Revision 1860):
Additional MDI/SDI improvements and fixes. By default, dForm on Windows will be
a MDI child.

Fixed PageFrame background color to take the background color from the form, not
unconditional white. Only on Windows - Gtk and Mac do the right thing by default.

Fixed various issues with getting icon files and converting them to bitmaps.

Set the default grid font to Arial,9 on Windows, as the wx-default was just plain 
ugly.

Added getPositionInSizer() method to sizers, since they may also be contained within sizers.

Reworked dShell. Now it appears as a split window, with the standard command area on the top, and the output in the lower pane. 

Changed dGridSizer to raise an exception if the insert method is called instead of just returning False.

Added SashPositionChanged event. Updated dSplitter to raise this event when the sash position changes.

Added scrollToBeginning() and scrollToEnd() methods to dEditBox.

Added pass-through properties for dSplitForm's splitter's panels.

Added the property 'SplitState' to the dShell class. By right-clicking on the shell, you can toggle between the new split behavior and the "traditional" single pane behavior. 

Added a right-click menu to the output pane. Right now all it can do is clear itself, but we could add other stuff such as font selection, etc.

Fixed a bug in uiApp that prevented Cut(), Copy() and Paste() from working in the shell (and other non-Daboized controls that only have wx versions of these methods).

Added a menu command to the shell to clear the output window using Ctrl-Backspace.

Added the MenuOpen event to dEvents. This allows us to create dynamic menus by intercepting this event and updating the prompts of the menu items as needed. Added the event data code to save the prompt and menu object that triggered the event.

Added 'deadObjectException' as an alias to wx._core.PyDeadObjectError to the dabo.ui.uiwx module. This will enable Dabo code to handle this condition without having to use wx code.

Added a bunch on internationalization to the dShell script.

Made the dMessageBox titles come from Application.getAppInfo(appName) by default.

Added handling for situations where a bizobj is used with a data connection.

Added a sizeToColumns() method. This will set the width of the grid equal to that of its component Columns.

Fixed copy to clipboard in about.py to use CRLF on Windows.

Added new properties to grid:
	HorizontalScrolling
	VerticalScrolling
	ShowColumnLables
	ShowCellBorders

The scrolling properties are booleans, and will hide/show the scrollbars.

Fixed some problems with setting the column's Width. For a number of reasons, 
when you created a grid from scratch and then added columns using addColumn,
the columns widths you'd specify weren't being respected. Fixed.

Moved the code for the dEditor class from ide/dEditor.py into its own uiwx-level class. This will allow other apps (I'm thinking Designer here!) to instantiate code editors where they need.

Revamped the layout of the dOkCancelDialog class to create the panel and sizer that is needed in addControls().

Cleaned up some of the default spacing so that with AutoSize=True, the form still looks OK.

Removed the split sash code from the dEditor. That stuff belongs in the form
the editor is located, not in the editor itself.

Fixed a bug in dGrid that only seemed to pop up when the grid was located on
a form with a bizobj but that wasn't a dForm. The presets dialog in
minesweeper fit that description, and it was throwing errors when you
navigated through the grid.

Added methods for getting/setting the back color of individual items.

Added property CellHighlightWidth to dGrid, and used that property in the about dialog.

Made dPanel.addControls() better behaved.

Reworked/improved the Quick Report dialog in datanav.

Updated dPageFrameNoTabs to raise the same events as the 'tabbed' versions do. Added a 'getPageNumber()' method.

Added PNG files for rotating images clockwise and counter-clockwise.

Improved dImage to support 90 degree rotation in either direction. Added rotation to the the demo.

Fixed a bug in dListControl's StringValue prop, and any other place where the framework was trying to call the control's GetString() method, since it doesn't have one.

Added SearchDelay property to dApp, which becomes the default SearchDelay for
dGrid. The dGrid SearchDelay can get set to any int but that won't override
the dApp setting. If dGrid.SearchDelay is set to None (the default), that is
when the dApp setting gets used. Set the default SearchDelay to 300 - better 
than the previous 600 IMO but still not too fast. Eventually, when we provide 
a default system preference screen, we should expose this property for the 
user to tweak how they like.

Cleaned up and consolidated lots of stuff in dGrid, which shouldn't have any
effect on runtime performance. Made SameSizeRows into an actual property.

Using the standard button sizer in the okay/cancel dialog is good, because
it lets wx handle the platform-convention rules. However, even though it
handles rearranging the order of the buttons as needed, it doesn't 
rearrange tab order. So I added code to do that.

Reworked the login dialog to subclass from dOkCancelDialog.

Reworked dGrid to sync the rowcount in refresh() calls. Fixed bug in syncing
of column counts.

The entire populate() cycle was happening every time you entered the browse 
page in datanav apps, when in reality the only thing you need to do in 
current dGrids when the dataset has been requeried is a simple refresh().

Added an initial call to _clearDocument(), which is where all the defaults are set for the editor. The DesignerEditor would not indent properly without this.

Added moveToBeginning() and moveToEnd() methods to position the pointer at the beginning and end of the document, respectively.

Added functions to dBizobj, dCursor, and dBackend to get the data structure
from the cursor description, instead of querying the backend based on a 
table name. This is more likely to contain correct information, but will
need work for other backends besides MySQL. Also, getting the pkid is
still problematic - but IMO it isn't a big deal to just have the user
tell us which field to use as the PK.

Fixed dGrid's buildFromDataSet() to use the new function so it will work
even if the bizobj has no records at the time of creation.

Fixed dGrid.sort() to not care if sort is done on an empty bizobj.
Added the logic to restore code saved in the Designer so that it functions properly in the re-created form.

This is big - really big. For the first time, you can create a form in the Designer, add code to be bound to events, or create custom methods, and that code will work in the form created from the .cdxml file exactly the same as if you had written those methods in a regular .py script.

Improved the card deck pictures.

Fixed some problems in the Icon setter that would cause errors if None was
passed, or if the icon path didn't exist, as would be the case if you were
running with py2exe and didn't include the icon files as resources.

Added a significant change to eventMixin.py's auto event binding logic. The code now first looks at the object itself before looking up its family tree. This is critical for the event binding when running a cdxml file, where methods are added to the object at runtime, and are not present in the class definition.

Cleaned up some spacing in dEvents; also fixed some "appliesToClass" logic that had events 'applying' to incorrect classses. There are still some anomalies, I'm sure; the event listing in the Designer will reveal these.

Modified the dynamic code binding to fix the problem with modifying the object's class definition in the current namespace. Also fixed a problem where code for dPage objects was not getting assigned.

Fixed a bug in the dListControl's _getValue() method when there were no items in the list.

Added alias 'dragging' for 'mouseDown' in the EventData for mouse events.

Added method 'getMousePosition()' to dPemMixin. This returns the mouse position in relative coordinates to the object that called it.

Added 'drawBitmap()' method to dPemMixin. Like the other wx.DC drawing methods, this wraps the wx.DC.DrawBitmap() method into an object interface that Dabo objects can use.

Changed getSQL() so that if no FROM clause has been specified, it defaults to a FROM clause using the cursor's Table.

Added properties SettingsFileName and SettingsDirectoryName to the app's
UserSettingProvider. The defaults for both come from 
app.getAppInfo("appShortName"), and determine the name of the directory
and file name of the user settings file. The directory name will be 
lower()'d and have a '.' prepended automatically.

Created the dFoldPanel and dFoldPanelBar classes, which wrap the built-in wx.lib.FoldPanel classes. Modified __init__.py to include these, and added some hacks to dPemMixin to enable them to work with the event structure.

Added the dCalendar control. This wraps the wx.calendar.CalendarCtrl, making it simpler and more Pythonic to work with.

Added a setting 'firstDayOfWeek' to dabo.settings

Moved the method _getWxColour() from dFoldPanelBar into dPemMixin, as it is needed in both dFoldPanelBar as well as dCalendar, and possibly other wx controls that expect a wx.Colour object instead of a color tuple.

Added the calendar events and their processing.

Added a form subclass named 'dBorderlessForm'. This creates a form with no visible border or title bar. Renamed the base form class in dForm.py from 'dFormBase' to 'BaseForm'. I felt that the 'd' prefix was misleading, as it isn't meant to be a Dabo base class at all.

Updated dDateTextBox to use regular datetime values internally instead of wx.DateTime. Updated the calendar to use the new Dabo dCalendar instead of the raw wx version.

Added row and column highlighting to the dGrid class. Default is to only show the selected cell, but that can be changed by setting the SelectionMode property to either "rows" or "columns". The color used to highlight the selected row/col is controlled by the new SelectionBackColor and SelectionForeColor properties; defaults are yellow background and black text.

Added a GridRangeSelected event to dEvents, and added the code to raise it to dGrid.

Changed the default SelectionMode for the datanav grid to 'row'.

Added some additional properties and functionality to the dFoldPanelBar class. First is the 'Singleton' property, which controls a behavior in which one and only one panel is open at any time. Expanding a different panel collapses the currently open one, and attempting to collapse the expanded panel does nothing. 

Second, there is a 'SingleClick' property that controls whether you need to double-click on a panel's caption bar (default behavior) to toggle it, or whether a single click will suffice.

Finally, the 'CollapseToBottom' property determines whether any collapsed panels are positioned at the bottom of the control, or whether they remain in their natural position.

I added the FoldPanelCaptionClick and FoldPanelChange events to dEvents in order to implement these features. They are available to instances of the dFoldPanelBar class for hooking additional behaviors to these events.

I updated the test form for dFoldPanelBar to enable you to play with these settings.

Fixed a bug in dGrid's new SelectionMode property. I had previously checked for only 'r' or 'c' at the beginning of the setting, forgetting that 'cells' is a valid setting, so I fixed that to check the first two letters.

Added the property 'AlternateRowColoring' to dGrid. When True, rows in the grid will be colored depending on the RowColorOdd and RowColorEven properties.

Changed the datanav grid to use alternate row coloring.

Added some changes to the column Width setting that were necessary for working correctly in the Designer.

Fixed a bug with MultipleSelect in the dTreeView class. Added some navigation methods for returning adjacent nodes. Fixed a selection bug when working with MultipleSelect=True.

Added code to properly escape characters that should not be in XML attributes. Also cleaned up some uneven spacing in the created XML.

Fixed a bug in dGrid that didn't allow the ColumnCount to be reduced.

Fixed a bug in dPage that happened when the page was instantiated separately from the pageframe, since it wasn't yet in the Pages collection.

Added 'dEditableList', which is a wrapping of the wx.gizmos.EditableListBox. This control takes a list and allows the user to add/edit/delete items from the list, as well as re-order them. There are properties to enable/disable any of the following: edit, add, delete, order. All are enabled by default.

Fixed a bug in dGridSizer. Apparently, calling 'AddGrowableRow/Col' multiple times increments an internal counter, and a subsequent 'RemoveGrowableRow/Col' will only decrement it, and will not set it to be not growable unless the counter has dropped to zero. Now setting a row as growable won't do anything if it already is.

Added the drawText() method, along with the text draw objects.

Added columns to reportWriter. Added smarter sorting of elements in the xml
output, for instance putting the report title up top instead of on bottom,
and putting the bands in order that they appear and not alpha order.

Changed all the sizer routines to return the SizerItem managing the object that was just added to the sizer.

Sizer.Children now modified the SizerItem objects to include a 'ControllingSizer' attribute that references the parent sizer.

Modified the dFoldPanelBar class to better time its refreshes. It's still a bit funky, but does seem to work better.

Modified dFormMixin to handle the new Spacer panels correctly.

Added a 'Children' property to dFoldPanelBar that returns the child panels,
instead of the layout panel that it uses to manage the visible panels.

Added a return value to setItemProp() in the sizers so that we can tell if a
value was successfully applied.

Fixed the problem with propertyHelperMixin.getPropertyList(): it was
caching the list of properties across the class hierarchy, instead of
caching just for this one class definition. Good catch, Ed!

Wrapped the wx.CheckListBox for Dabo.

Changed the parameter to sizer for setting the sides that the Border property applies to from 'borderFlags' to 'borderSides', as this seems much more appropriate. Updated the sizers to properly get/set this prop from a list of values.

Changed all hard-coded "\n" in dicttoxml to the more crossplatform idiom
"%s" % os.linesep.

Fixed a problem whereby nested sizers did not get their Parent property set. Thanks to Casey McGuire for catching this bug.

Added the GridCellEditBegin event, which is raised when a grid cell editor is shown. This allows you to record the value of a cell before it is modified by the user.

Added StayOnTop property to dFormMixin.

Added ShowMenuBar property, so I can avoid showing the Dabo menubar on my
property sheet and object tree forms.

Added groups and variables elements to a newly created report form.

Changed the default position to (-1, -1), since (0, 0) places the form under the menu bar when running on OS X.

Fixed a problem with dGrid on Windows where the propsheet was stealing the focus

Added ForegroundColor and BackgroundColor to dColumn. These props apply
to all cells in a column that don't have custom renderers.

Fleshed out the 'nextNode()' and 'priorNode()' methods to provide true flat navigation through the tree. Also cleaned up several other methods that dealt with nodes and their objects.

Added font properties to treeview nodes.

Wrapped the wx.Font object into dFont. This breaks the font editing on the PropSheet, and possibly a few other places that use the font prop, but we'll have to find those afterwards. All previous references to Font have to be changed to GetFont() instead; likewise, all assignments to Font must be replaced with calls to SetFont().

Revamped the internals of dFont.

Added 'defaultFontSize' to settings.py

Updated the font handling in dGrid and dTreeView.

Cleaned up some spacing in dLabel.

Added the default wx IDs to the About and Quit menu items so that they appear in the proper place on OS X.

Updated the long-neglected BorderSizer class, which wraps the wx.StaticBoxSizer class. You can now pass either a pre-made dBox object to the constructor, or pass a parent object, and the constructor will create the box for you.

Added a Caption property to dBorderSizer. This will update the caption displayed on the sizer's box.

Refactored the getItemProp() method so that dBorderSizer will use the same functionality.

Added getAvailableFonts() method. Returns a list of all font faces installed on the current system.

Updated dFormMixin to handle dBorderSizer objects in .cdxml files

Changed the prompt and shortcut for the 'Quit' item in dBaseMenuBar to be 'Quit' and 'Ctrl-Q' on all platforms.

Added additional properties to dBorderSizer that are basically proxies to the box's caption.

Added a Dabo wrapper for wx._core._wxPyDeadObject.

Added a couple helper functions for converting between 0-255 rgb
format and 0-1 format.

Added basic MRU (Most Recently Used) capabilities to Dabo. I had looked at the wx.FileHistory class, but it seemed a bit too rigid to work with our design. 

To use MRU in a menu, the menu should be created by passing 'MRU=True' in the constructor. I've 

Added Variables, Groups, and Objects as ReportObjectCollections. 

Changed dEvents.ContextMenu to derive from Event instead of MenuEvent, since
the contextmenu event is a request for a context menu to be displayed, and 
not generated from any existing menu.

Added an addObject() function to report objects. Changed the sorting of 
report elements so that Variables appears before Groups. Fixed a bug 
which sometimes kept variables and groups from getting their xml
generated.

Modified xmltodict to properly escape any internal ampersands.

Modified the Quick Report (list format) to generate the report form not by
crafting the XML by hand, but by using the object interface and then finally
having the report writer return the XML. This results in quick reports 
getting the same XML format as if the Designer were used.

Added the dHyperLink control. This is a wrapped version of the wx.lib.hyperlink.HyperLinkCtrl.

Added a new function to dabo.ui, callAfterInterval(func, interval). It will
call the passed function after the interval has elapsed. Additionally, if
callAfterInterval() is called again with the same function before the original
timer had elapsed, the old timer is destroyed and the new one instantiated,
making the function only run once, after a timer finally reaches the interval.

Added 'removePage()' and 'cyclePages()' functions to the dPageFrameMixin class. The former allow for a specific page to be removed, while the latter accepts an integer value and cycles the selected page forward (positive) or backwards (negative).

Added a clear() function to dMenu() for removing all current items.

Thanks to Brandon Singer, I've fixed a problem where passing kwargs to the 
constructor of any dObject subclass would silently pass any unhandled 
kwargs. The fix to the base problem was easy, but it turns out lots of 
our code was relying on this. I fixed the obvious places (code that gets run
from dabo/ui/uiwx/test.py) but I suspect I've missed a few. If you get
the exception:

TypeError: __init__() got an unexpected keyword argument '<argument>'

then it is due to this fix.

The minesweeper demo uses dabo.fastNameSet when creating the squares, and
it turns out that when fastNameSet is True, autoBindEvents() doesn't run.
Fixed.

Fixed dApp to raise the Activate/Deactivate events properly. Fixed dApp to raise Key events. The app gets key events if no window has stopped the event along the way. So now we can dApp.bindEvent(dEvents.KeyChar, func). Fixed dApp to autoBindEvents().

the menutype keyword can now be used to specifiy about, exit and preferences menu item. Dabo will then automatically use the correct wxID, so the menu items are automatically moved to the MacOS application menu.

Modified colorTupleFromName() to also attempt to interpret strings as HTML-style hex values.


Dabo-0.5 (2005-11-30) (Revision 1610):

Added a new class, DataSet, which lets you issue sql queries against local
Dabo data, not just against the backend. You can query, sort, and update
individual DataSets, and even join multiple DataSets - all without making a
call to the backend database server. 

Began the work of making an embedded, internal, database engine (SQLite).
Starting with future releases, SQLite will be an integral part of Dabo.

Improved the autoBindEvents() to bind to matching methods in all parent
containers, not just the form. Auto-binding of events now works so well that
it is the default; you no longer have to manually call it. This is now
*really cool*.

Added a basic framework for drawing shapes on any window. Once created, the
shapes are accessible with an object reference. This should make dealing with
DC's a thing of the past for most uses. Way cool!

Sorted out MDI/SDI issues. By default, dForm on Windows MDI children and
dFormMain on Windows will be MDI parents. On other platforms, both dForm and
dFormMain will be SDI by default. The above statement is true for datanav
applications (ones generated by the AppWizard). The pure-Dabo default is for
SDI forms. In any case, you may change this by setting dabo.MDI.

Improved the datanav Quick Report feature, which can print a list of the
current records, mimicing the browse page, or a whole page of information on
one record, mimicing the edit page. Added the ability for the user to save
the generated report form for editing with the Report Designer or editing the
rfxml directly.

Improved showContextMenu(), and sorted out the difference between
MouseRightClick and ContextMenu events.

Fixed bug in Find dialog which would segfault on Windows and Mac. Added
replace functionality.

dCheckBox now supports 3 state mode, (True, False and None).

Fixed bug in dbMySQL that would interpret longtext or longblob fields as
ints.

Fixed dBackend to properly send Python None values as NULLs.

dForms now know how to read in cdxml files, created by the upcoming UI
Designer.

Fixed a bug in colorTupleFromString() that failed to return the correct
value.

Fixed some encoding issues with dReportWriter. 

Added some handling for broken database connections.

Added some useful properties to dTreeView that improve its display and
editability. 

Fixed some problems with the Hit event and dSpinner.

Improved report writer's paragraph handling.

Further removed user code from direct wx access in a few places. User code
can still get at the wx structures though, just not quite as easily.

Fixed mixed indentation problems, made some code cleaner, and added/edited
lots of docstrings. 

Added some useful functions to dMenu to remove items and get references to 
menu items. 

Added a DynamicEnabled property to dMenuItem. Set this to a function which 
will get run when the parent menu is shown to determine whether the menu
item is enabled or not. 

Menu.Children will now contain object references to Dabo menus and menu
items.

Improved dToolbar somewhat, in anticipation of fully objectifying the
individual toolbar items. The ultimate goal is for the interface to
a dToolbar to be similar to that of dMenu.

Fixed some problems in dBizobj that make working with multi-table select
statements more sane.

Fixed a bug in dGrid which resulted in very slow deletion of rows, for
instance
after requerying the recordset and getting fewer rows that were in the grid
before.

Added properties ShowInTaskBar and FloatOnParent to dForm, and actually
made the following properties work: ShowMinButton, ShowMaxButton,
ShowCloseButton, ShowSystemMenu, TinyTitleBar.

Added a picklist mode to datanav Forms, showing only the select and browse
pages for a user to pick a record. The form dismisses on escape, and returns
the selected row's pk on enter.

Handling of None values in many UI controls, the bizobj, and the database is
much improved.

Added middle button and scroll mouse events.

Added some hooks to datanav.Form that allow developers to control the
select options for given fields. This would allow you to put, for example,
a radiogroup with a few choices instead of the default textbox.

Added connection manager to dApp, which maintains a set of open database
connections that your forms can reference by name. Added Connection property 
to dForm.

Fixed bugs in and improved dSplitter, dListControl, dControlItemMixin, and
dListBox.

Phwew! All that in 7 weeks.



Dabo-0.4.2 (2005-10-07) (Revision 1418):
Added PrimaryBizobj property to dForm, which can replace calls to getPrimaryBizobj().

Added Accepted property to dOkCancelDialog, which gets set automatically if the
user pressed "OK".

Added AutoSQL, UserSQL, CurrentSQL, LastSQL properties to dCursor and dBizobj.
When time to requery, the SQL will come from UserSQL if set, or AutoSQL will
be regenerated. 

Fixed a bug that kept changes to a new record from getting committed.

Added DefaultValues property to bizobj.

Added ListSelection and ListDeselection events to dListControl. Added properties
MultipleSelect, HitIndex, LastSelectedIndex, HeaderVisible, HorizontalRules,
and VerticalRules. Changed the behavior of both dListControl and dListBox so that merely selecting an item doesn't raise the Hit event; instead, it raises a ListSelection event, and if another item had been previously selected, it raises a ListDeselection event. Hit is only raised from double-clicking on an item, or by pressing Enter.

Added new property to dTextBox: StrictDateEntry. Changed the code for
interpreting dates entered by the user to allow for some less explicit
formats (YYYYMMDD, YYMMDD, and MMDD). If StrictDateEntry is False (the
default), these other formats will be used when interpreting dates
entered by the user.

Added field-level validation to the framework.

Improved support for decimal.Decimal, both at the database level and in
dTextBox.

Added new auto event binding, which automatically binds events based on any
defined callback functions. For example, if you have a method onMouseEnter()
defined, the dEvents.MouseEnter will automatically be bound to that method.
Inspired by PythonCard.

Added RegID property to forms, that allows for object registration
with the form. Not all objects require RegIDs, but if they have one,
they must be unique among all objects in a form. A reference to that
object can then be gotten from any other object by calling
'self.Form.getObjectByRegID(<regid>)'.

Linked RegID to the auto event binding, so that if a form has a method
of onHit_cmdOK(), and has a button with a RegID of 'cmdOK', the
cmdOk's Hit will get bound to the form's callback, automatically.

Improved dGrid and dColumn. Many properties added, and you are now in much
finer control over the display of grid column headers, grid cell attributes,
grid cell editors and renderers, and the grid itself. 

Began work of allowing case-insensitive property values for properties that
take string values, and for properties that take a limited number of values
where the first letter is unique, you can set the property by just using the
first letter. dTextBox.Alignment = "c" sets the property to "Center", for 
example.

Modified dBizobj, dCursorMixin, and dBackend so that the user can specify 
the Unicode Encoding to use. Changed the default encoding from latin-1 to
utf-8.

Added feature to optionally draw sizer outlines on any form that uses dSizers.
This is currently accessible via an option in the View menu when the base
menu bar is in use, or you can turn it on/off programatically.

Grids now remember the column that is sorted, and resort when next instantiated.

Added support in dReportWriter for report groups and report variables, and 
dynamic band heights (based on the height of contained objects). Added showExpr,
which is an expression that evaluates at runtime and if true, shows the object
in the report, and not if false. 

Improved the automatic print preview report format in datanav. It now:

	+ prints column headers

	+ mirrors the font size, column width, cell vertical and horizontal
	  alignment, and column height of the grid

	+ mirrors the font size, header height, vertical and horizontal 
	  alignment of the grid headers

	+ automatically reorients to landscape if the detail flows beyond the width
	  of portrait

	+ stops printing more columns if doing so would result in overflowing the
	  right margin

Key bindings are now case-insensitive.

Improved docstrings and API documentation.


Dabo-0.4.1 (2005-08-30) (Revision 1226):

Improved test framework for uiwx. Now you can run ui/uiwx/test.py and get
almost all of the dabo controls in one form, and they are the same tests 
that you get when you run an individual control directly.

Factored out the saving/restoring of user settings out of dApp into 
the separate dUserSettingProvider class, which can be subclassed or
overridded by the developers. Added properties UserSettingProvider
and UserSettingProviderClass to dApp. 

Dabo user settings are no longer saved to .userSettings.ini in the app
directory, but are saved to the user's home directory (in ~.dabo/) or
if on Windows, in <User Profile>/Application Data/Dabo/.

Support for SQLite added. As of this moment, Dabo supports several major 
open-source database backends: MySQL, PostgreSQL, Firebird, and SQLite.
Next on the list should be Oracle, Sybase, and MS-SQL.

Started work implementing a Quick Report in the datanav library, which 
replaces the old HTML Print Preview. This uses the fledgling Dabo Report
Writer to create a PDF rendition of the dataset. 

Added new property for all controls: StatusText. When set, and when the 
form has a status bar, that text will show in the form's status bar when
the mouse enters the control. 

Expanded the dabo.ui.strToBmp() function to accept an optional scale factor
or width/height values. If they are passed, the returned bitmap image is 
sized to those values.

Added an optional parameter to the bizobj and cursor's getDataSet() method.
If you send a list of field names, only those fields are returned. 

Fixed some lingering bugs in the dabo.ui.uiwx package and the datanav
lib. dWizard works better now. Improved dGauge, dLine, dBox, dRadioBox, 
dListBox, dToolBar, and dSizers.

Added simple decimal support to dTextBox.

Work continues on dGrid, specifically dColumn is now better worked 
into the "Dabo Way".

Added dabo.trace() function, that will drop you into pdb.

dConnectInfo reworked to have better property names.

Removed dependency on PIL and reportlab from Dabo. These are dependencies
still, but only if you try to run a report.

Added dabo.lib.StopWatch.StopWatch class, which is a light Python 
stopwatch with start(), stop(), reset() methods and Value property.

This is a partial list. Both Ed and Paul have been very busy with Dabo
since 0.4 a few weeks ago. Lots of bugfixes and enhancements were made,
and we encourage everyone to upgrade.


Dabo-0.4 (2005-08-08) (Revision 1132):

Cleaned up the initialization of properties. No more initStyleProperties();
user code just puts their props in initProperties() or sends them to the
constructor in the properties arg or as separate named arguments. The
framework sorts out when the properties need to be set in the object
construction cycle.

Improved sizers by separating out the Halign and Valign properties, 
eliminating the need to use the 'alignment' flags parameter. Added the 
'Parent' property, making it easy to reference the control that 'owns' 
the sizer. Also added the convenience method 'append1x(item)', which is 
shorthand for writing 'append(item, 1, "expand")', since it is used so 
frequently. The grid sizers now have 'isRowGrowable()' and 'isColGrowable()'
methods for checking the status of any row/column.

New dGrid, with dColumn and Header objects available for reference.

Lots of convenience functions written, such as those designed for simplified 
access to common dialogs, are now built into the dabo.ui module. Examples: 
getFile(), getColor(), getBitmap(), and the getString() functions, which all 
create, show and destroy the required dialog window, and then return the 
result. So, to present the user with a font selection dialog, just call 
dabo.ui.getFont(), and the selected font will be returned (or None if they 
canceled). Similarly, to show a common messagebox and get the response, 
just use dabo.ui.info(), dabo.ui.stop(), or dabo.ui.areYouSure(). 

doDefault() much faster now (thanks to Alex Martelli)

Support for decimal.Decimal.

New classes: dColorDialog, dToolBar.

Work on the report writer and report designer progresses. The report designer
is now in the daboide project, not here in dabo anymore.

We finally have distutils support. To install Dabo, do the standard
"python setup.py install". Thanks to limodou for submitting the patch.


Dabo-0.3.2 (2005-03-21) (Revision 959):

Work continued on the Dabo report writer and report designer. The
writer will now read and write the rfxml file format, and will do some 
simple reports. The designer will edit the rfxml files, again, with simple
formats. This isn't ready to use yet but the foundation is in place.

cursorToXML() added.

Encoding property added to databases.

dBitmap introduced.
dWizard introduced.
dTreeView introduced.

dGrid is being refactored, and is almost done. For a short time, it can
be found as dGridX.

We worked hard trying to get window closing not to segfault on Windows, 
to get icons to display correctly on Mac, and to optimize Dabo in some key
bottleneck areas. We've greatly improved Dabo's performance on all platforms,
and Dabo now behaves less differently on each platform.

Improved data binding: controls don't need to bind to a bizobj, but to any 
object expression.

Improved Firebird and PostgreSQL support.

Lots of improvements and bug fixes, in all three tiers.


Dabo-0.3.1 (2005-02-16) (Revision 802):

Separated creation of dCursor from dBizobj.
Added option to automatically create a dPanel in dForm.
Further Daboized dListControl.
Fixed display of a few of our icons on Mac.
Added bindKey() method, which binds a keycombo like "Ctrl+D" to a function.
Daboized dMenu, dMenuItem, and dMenuBar.
Minimal Tkinter (dCheckbox) working again (testing only).
Added ActiveControl property to dForm.
Various dSizer improvements were made.
We moved various things to better places in the source tree.
Connection info now saved in XML format.
Localization framework added. Courtesy Vladimir Sekissov.
Added Children property, which contains a list of a container's children.
dCommandButton is now known as dButton.


Dabo-0.3 (2005-01-10):

New UI controls added:
    dFileDialog.py
    dListBox.py
    dListControl.py
    dSplitForm.py
    dSplitter.py

GridSizer added. Method calls to all sizers greatly simplified.

Menus simplified, removing wx-specific calls.

My favorite UI debugging tool: getMouseObject()

Framework classes now consistently use the standard initialization 
methods: initProperties, initEvents, etc.

Child requeries and transaction support added to bizobj

Bizobjs now support the relationSpecs.rsxml format for adding child 
relations.

Support for fulltext-type searches by word added.

Auxiliary (one-shot) cursors added to main cursors for better support 
of different backends.

Improved unicode support in cursors.

Added support for PostgreSQL. Added template to ease creation of new 
backend support scripts.

appWizard: added support for parent/child/grandchild/... relationships; 
improved FieldSpecEditor.

appWizard/dDataNav* classes:
    changed all wx.Sizers to dSizers
    added "-ignore-" to visually indicate search criteria that will not be used
    added save/restore of values on search page.
    added 'Matches Words' option for fulltext searches
    fixed bugs with searches for boolean values

Controls:
    Now auto-name themselves. Unique name enforcement added.
    Added _IsContainer attribute to distinguish controls that can add other controls to themselves.
    Added support for setting colors by name instead of RGB tuple.
    Fixed resizing bug that would not allow a resized object to be made smaller.


Dabo-0.2 (2004-09-20):

Continued improving FireBird database support, improved MySQL support. Added
preliminary SQLite support.

Save passwords encrypted.

Added logger objects to send program output to, instead of directly to stdout.

Began abstraction of Tkinter at purely an experimental level.

Added some new controls, such as a better date control and a combo box. 

Brought in some Foxpro string functions from the openfox project.

New event model, greatly simplifying the binding of events, the raising of events,
and the subclassing of events to define new events.

Added preliminary unicode support to the cursor level. 
	

Dabo-0.1.1 (2004-06-13):

Dabo-0.1 (2004-05-10):

