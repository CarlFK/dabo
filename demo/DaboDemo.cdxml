<?xml version="1.0" encoding="utf-8" standalone="no"?>
<dForm Name="dForm" Caption="Dabo: A Demonstration" UseSizers="True" Height="730" Width="1018" designerClass="DesForm" Left="215">
	<code>
		<editorChanged><![CDATA[
def editorChanged(self):
	self.saveModButton.Enabled = self.codeEditor.Modified
]]>
		</editorChanged>
		<logit><![CDATA[
def logit(self, txt):
	self.log.Value += "%s\n" % txt
	self.log.scrollToEnd()
	self.log.ShowPosition(self.log.GetLastPosition())
]]>
		</logit>
		<_setActiveCode><![CDATA[
def _setActiveCode(self, val):
	self.demoModules.setActive(val)
	self.loadDemo()
	self.loadDemoSource()
	self.radMod.Value = val
]]>
		</_setActiveCode>
		<_getActiveCode><![CDATA[
def _getActiveCode(self):
	try:
		ret = self.demoModules.getActive()
	except StandardError, e:
		ret = 0
	return ret
]]>
		</_getActiveCode>
		<showCode><![CDATA[
def showCode(self, line=-1):
	self.codeEditor.showContainingPage()
	if line is not None:
		self.codeEditor.LineNumber = line
]]>
		</showCode>
		<afterInit><![CDATA[
def afterInit(self):
	self.BasePrefKey = "demo.DaboDemo"
	self.setupMenu()
]]>
		</afterInit>
		<setOverview><![CDATA[
def setOverview(self):
	module = self.demoModules.getActive()
	ov = module.overview
	self.moduleOverview.Source = ov
]]>
		</setOverview>
		<saveModCode><![CDATA[
def saveModCode(self):
	self.demoModules.saveMod(self.codeEditor.Value)
	self.ActiveCode = 1
	self.demoModules.updateFile()
	self.radMod.reset(self.codeEditor.Modified)
]]>
		</saveModCode>
		<afterInitAll><![CDATA[
def afterInitAll(self):
	pth = os.path.abspath(os.path.join(self.Application.HomeDirectory, "samples"))
	if pth not in sys.path:
		sys.path.insert(0, pth)
	self.demos = demos = {}
	exFiles = glob.glob(os.path.join(pth, "*.py"))
	for f in exFiles:
		justFname = os.path.splitext(os.path.split(f)[1])[0]
		if justFname.startswith("_"):
			continue
		exec("import %s as exx" % justFname)
		maincat, subcat = exx.category.split(".")
		if maincat not in demos:
			demos[maincat] = {}
		demos[maincat][subcat] = justFname
		del locals()["exx"]
	# Create the tree
	tree = self.tree
	tree.clear()
	root = tree.setRootNode(_("Dabo Overview"))
	mKeys = demos.keys()
	mKeys.sort()
	for mc in mKeys:
		nd = tree.appendNode(root, mc)
		sKeys = demos[mc].keys()
		sKeys.sort()
		for sc in sKeys:
			sn = tree.appendNode(nd, sc)
			sn._obj = demos[mc][sc]
	tree.expandAll()
]]>
		</afterInitAll>
		<onClearOutput><![CDATA[
def onClearOutput(self, evt):
	self.log.Value = ""
]]>
		</onClearOutput>
		<loadDemo><![CDATA[
def loadDemo(self):
	dpnl = self.demoPanel
	sz = dpnl.Sizer
	for kid in dpnl.Children:
		sz.remove(kid, True)
	try:
		pnl = self.demoModules.getActive().TestPanel(dpnl)
	except StandardError, e:
		pnl = DemoErrorPanel(dpnl)
		err = DemoError(sys.exc_info())
		pnl.setErrorInfo(self.codePage, err)
	sz.append1x(pnl)
	if self.displayFrame.SelectedPageNumber == 0:
		# Switch to the demo
		self.demoPageFrame.showDemoPage()
	self.demoPanel.layout(resetMin=True)
]]>
		</loadDemo>
		<treeSelection><![CDATA[
def treeSelection(self):
	try:
		sel = self.tree.Selection._obj
		self.demoModules = DemoModules(sel)
		self.setOverview()
		self.loadDemoSource()
		self.loadDemo()
		self.log.Value = ""
		ok = True
	except AttributeError:
		ok = False
	self.displayFrame.showContents(ok)
]]>
		</treeSelection>
		<loadDemoSource><![CDATA[
def loadDemoSource(self):
	dm = self.demoModules
	self.codeEditor.Value = dm.getSource()
	mod = dm.hasModified()
	self.radMod.reset(mod)
	self.saveModButton.Enabled = False
	self.delModButton.Enabled = mod
]]>
		</loadDemoSource>
		<deleteModCode><![CDATA[
def deleteModCode(self):
	self.demoModules.deleteModified()
	self.ActiveCode = 0
]]>
		</deleteModCode>
		<importStatements><![CDATA[
import glob
import os
import sys
from Modules import DemoModules
from Modules import DemoError
from Modules import DemoErrorPanel
from dabo.dLocalize import _
]]>
		</importStatements>
		<setupMenu><![CDATA[
def setupMenu(self):
	mb = self.MenuBar
	vm = mb.getMenu("View")
	vm.remove("Show/Hide Sizer Lines")
	vm.append(_("Clear Ou&tput"), HotKey="Ctrl+Back", OnHit=self.onClearOutput)
]]>
		</setupMenu>
	</code>

	<properties>
		<ActiveCode>
			<comment>Zero for Original; 1 for modified</comment>
			<defaultValue>0</defaultValue>
			<deller>None</deller>
			<getter>_getActiveCode</getter>
			<propName>ActiveCode</propName>
			<defaultType>integer</defaultType>
			<setter>_setActiveCode</setter>
		</ActiveCode>
	</properties>

	<dSizer SlotCount="1" designerClass="LayoutSizer" Orientation="Vertical">
		<dSplitter SashPosition="307" sizerInfo="{'Proportion': 1, 'HAlign': 'Center', 'VAlign': 'Middle', 'Expand': True}" designerClass="controlMix" Split="True" Orientation="Vertical">
			<dPanel AlwaysResetSizer="True" designerClass="MixedSplitterPanel" Name="dPanel2">
				<dSizer SlotCount="1" designerClass="LayoutSizer" Orientation="Vertical">
					<dTreeView RegID="tree" sizerInfo="{'Proportion': 1, 'HAlign': 'Center', 'VAlign': 'Middle', 'Expand': True}" designerClass="controlMix">
						<code>
							<onTreeSelection><![CDATA[
def onTreeSelection(self, evt):
	self.Form.treeSelection()
]]>
							</onTreeSelection>
						</code>

						<dNode Caption="This is the root" designerClass="controlMix">
							<dNode Caption="First Child" designerClass="controlMix"></dNode>
							<dNode Caption="Second Child" designerClass="controlMix">
								<dNode Caption="Grandkid #1" designerClass="controlMix"></dNode>
								<dNode Caption="Grandkid #2" designerClass="controlMix">
									<dNode Caption="Great-Grandkid #1" designerClass="controlMix"></dNode>
								</dNode>
								<dNode Caption="Grandkid #3" designerClass="controlMix"></dNode>
							</dNode>
							<dNode Caption="Third Child" designerClass="controlMix"></dNode>
						</dNode>
					</dTreeView>
				</dSizer>
			</dPanel>
			<dPanel AlwaysResetSizer="True" designerClass="MixedSplitterPanel" Name="dPanel1">
				<dSizer SlotCount="1" designerClass="LayoutSizer" Orientation="Vertical">
					<dPageFrameNoTabs RegID="displayFrame" sizerInfo="{'Proportion': 1, 'HAlign': 'Center', 'VAlign': 'Middle', 'Expand': True}" designerClass="controlMix" PageCount="2">
						<code>
							<showContents><![CDATA[
def showContents(self, showCode):
	self.SelectedPageNumber = {True: 1, False: 0}[showCode]
]]>
							</showContents>
						</code>

						<dPage Caption="" designerClass="controlMix" Name="dPage">
							<dSizer SlotCount="1" designerClass="LayoutSizer" Orientation="Vertical">
								<dHtmlBox RegID="mainOverview" sizerInfo="{'Proportion': 1, 'Expand': True}" designerClass="controlMix">
									<code>
										<afterInit><![CDATA[
def afterInit(self):
	self.Source = """<div align="center"><img src="dabo_lettering_250x100.png"></div>
	<h1 align="center">Dabo Demonstration</h1>
	"""
]]>
										</afterInit>
									</code>
								</dHtmlBox>
							</dSizer>
						</dPage>
						<dPage Caption="" designerClass="controlMix" Name="dPage1">
							<dSizer SlotCount="1" designerClass="LayoutSizer" Orientation="Vertical">
								<dPageFrame RegID="demoPageFrame" sizerInfo="{'Proportion': 1, 'HAlign': 'Center', 'VAlign': 'Middle', 'Expand': True}" designerClass="controlMix" PageCount="3">
									<code>
										<showDemoPage><![CDATA[
def showDemoPage(self):
	self.SelectedPageNumber = 2
]]>
										</showDemoPage>
									</code>

									<dPage Caption="Overview" designerClass="controlMix" Name="dPage">
										<dSizer SlotCount="1" designerClass="LayoutSizer" Orientation="Vertical">
											<dHtmlBox RegID="moduleOverview" sizerInfo="{'Proportion': 1, 'Expand': True}" designerClass="controlMix"></dHtmlBox>
										</dSizer>
									</dPage>
									<dPage RegID="codePage" Caption="Demo Code" designerClass="controlMix" Name="dPage1">
										<dSizer SlotCount="2" designerClass="LayoutSizer" Orientation="Vertical">
											<dSizer SlotCount="4" sizerInfo="{'Expand': True}" designerClass="LayoutSizer" Orientation="Horizontal">
												<dRadioList sizerInfo="{'Proportion': 1, 'VAlign': 'Middle', 'Border': 4, 'Expand': True}" ValueMode="position" Orientation="Horizontal" Value="0" Choices="[u&apos;Original&apos;, u&apos;Modified&apos;]" Caption="Active Version" designerClass="controlMix" DataField="ActiveCode" RegID="radMod" DataSource="self.Form">
													<code>
														<reset><![CDATA[
def reset(self, hasMod):
	self.enableString("Modified", hasMod)
]]>
														</reset>
														<afterInit><![CDATA[
def afterInit(self):
	self.reset(False)
]]>
														</afterInit>
													</code>
												</dRadioList>
												<dPanel Spacing="12" sizerInfo="{'Expand': True}" designerClass="LayoutSpacerPanel"></dPanel>
												<dButton RegID="saveModButton" Caption="Save Changes" sizerInfo="{'HAlign': 'Center', 'VAlign': 'Middle', 'Border': 5}" designerClass="controlMix">
													<code>
														<onHit><![CDATA[
def onHit(self, evt):
	# Save modified code
	self.Form.saveModCode()
]]>
														</onHit>
													</code>
												</dButton>
												<dButton RegID="delModButton" Caption="Delete Modified" sizerInfo="{'HAlign': 'Center', 'VAlign': 'Middle', 'Border': 5}" designerClass="controlMix" Name="dButton1">
													<code>
														<onHit><![CDATA[
def onHit(self, evt):
	# Delete modified code
	self.Form.deleteModCode()
]]>
														</onHit>
													</code>
												</dButton>
											</dSizer>
											<dEditor RegID="codeEditor" sizerInfo="{'Proportion': 1, 'Expand': True}" designerClass="controlMix">
												<code>
													<afterInit><![CDATA[
def afterInit(self):
	self.Language = "Python"
	self.bindKey("F5", self.autoComplete)
]]>
													</afterInit>
													<onContentChanged><![CDATA[
def onContentChanged(self, evt):
	self.Form.editorChanged()
]]>
													</onContentChanged>
												</code>
											</dEditor>
										</dSizer>
									</dPage>
									<dPage Caption="Demo" designerClass="controlMix">
										<code>
											<onPageEnter><![CDATA[
def onPageEnter(self, evt):
	if hasattr(self, "_shown"):
		return
	self._shown = True
	ht = 1.0 * self.Height
	pos = self.dSplitter.SashPosition
	if pos/ht < .75:
		self.dSplitter.SashPosition = ht * .75
		self.layout(resetMin=True)
]]>
											</onPageEnter>
										</code>

										<dSizer SlotCount="1" designerClass="LayoutSizer" Orientation="Vertical">
											<dSplitter SashPosition="560" sizerInfo="{'Proportion': 1, 'HAlign': 'Center', 'VAlign': 'Middle', 'Expand': True}" designerClass="controlMix" Split="True" Orientation="Horizontal">
												<dPanel AlwaysResetSizer="True" designerClass="MixedSplitterPanel" Name="dPanel2">
													<dSizer SlotCount="1" designerClass="LayoutSizer" Orientation="Vertical">
														<dPanel RegID="demoPanel" sizerInfo="{'Proportion': 1, 'HAlign': 'Center', 'VAlign': 'Middle', 'Expand': True}" AlwaysResetSizer="True" designerClass="controlMix">
															<dSizer SlotCount="1" designerClass="LayoutSizer" Orientation="Vertical">
																<dPanel sizerInfo="{'Proportion': 1, 'Expand': True}" designerClass="LayoutPanel"></dPanel>
															</dSizer>
														</dPanel>
													</dSizer>
												</dPanel>
												<dPanel AlwaysResetSizer="True" designerClass="MixedSplitterPanel" Name="dPanel1">
													<dSizer SlotCount="1" designerClass="LayoutSizer" Orientation="Vertical">
														<dEditBox RegID="log" ReadOnly="True" designerClass="controlMix" sizerInfo="{'Proportion': 1, 'Expand': True}"></dEditBox>
													</dSizer>
												</dPanel>
											</dSplitter>
										</dSizer>
									</dPage>
								</dPageFrame>
							</dSizer>
						</dPage>
					</dPageFrameNoTabs>
				</dSizer>
			</dPanel>
		</dSplitter>
	</dSizer>
</dForm>
