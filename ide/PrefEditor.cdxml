<?xml version="1.0" encoding="utf-8" standalone="no"?>
<dForm Name="dForm" Caption="Dabo Preference Editor" Top="86" Height="602" Width="605" designerClass="DesForm" UseSizers="True" Left="201">
	<code>
		<expandAll><![CDATA[
def expandAll(self):
	self.tree.expandAll()
]]>
		</expandAll>
		<savePref><![CDATA[
def savePref(self):
	nd = self.tree.Selection
	key = self.tree.getKeyPathForNode(nd)
	val = self.txtPrefValue.Value
	self.pref.setValue(key, val)
]]>
		</savePref>
		<syncTree><![CDATA[
def syncTree(self, key):
	nodes = self.tree.nodes
	ret = [n for n in nodes 
			if n.FullCaption.endswith(key) ]
	if ret:
		self.tree.Selection = ret[0]
]]>
		</syncTree>
		<collapseAll><![CDATA[
def collapseAll(self):
	self.tree.collapseAll()
]]>
		</collapseAll>
		<deletePref><![CDATA[
def deletePref(self, key):
	self.pref.deletePref(key, nested=True)
]]>
		</deletePref>
		<afterInit><![CDATA[
def afterInit(self):
	self.pth = ""
	self.BasePrefKey = "dabo.ide.PrefEditor"
]]>
		</afterInit>
		<afterInitAll><![CDATA[
def afterInitAll(self):
	self.pref = dabo.dPref("")
	self.pref.AutoPersist = False
	self.pref._persistAll = True
	stru = self.pref.getPrefTree()
	root = self.tree.getRootNode()
	root.Caption = ""
	self.tree.treeFromStructure(stru, topNode=root)
	basenode = self.tree.nodes[1]
	[sib.expand() for sib in basenode.Siblings]
	self.tree.ShowRootNode = False
]]>
		</afterInitAll>
		<getNodeValue><![CDATA[
def getNodeValue(self, nd):
	pth = self.tree.getKeyPathForNode(nd)
	ret = self.pref.getValue(pth)
]]>
		</getNodeValue>
		<exit><![CDATA[
def exit(self, saving):
	if saving:
		self.pref.persist()
	self.release()
]]>
		</exit>
		<filterPrefs><![CDATA[
def filterPrefs(self):
	filt = "%%" + self.txtFilter.Value.strip()
	ds = []
	ds0 = self.pref.getPrefs(returnNested=True, key=filt, asDataSet=True)
	if ds0:
		ds = ds0.execute("select *,lower(ckey) as lowkey from dataset order by lowkey")
	grd = self.grdFilteredPrefs
	grd.DataSet = ds
	#grd.autoSizeCol("all")
	numMatch = len(ds)
	if numMatch == 1:
		suffix = ""
	else:
		suffix = "es"
	self.lblResults.Caption = "%(numMatch)s Match%(suffix)s" % locals()
]]>
		</filterPrefs>
		<addPref><![CDATA[
def addPref(self, base, key, typ):
	if base:
		newkey = "%s.%s" % (base, key)
	else:
		newkey = key
	if typ == "Node":
		# Just set the node
		eval("self.pref.%s" % newkey)
	else:
		typDict = {"String": str, "Unicode": unicode, "Integer": int, "Float": float, 
				"Boolean": bool, "List": list, "Tuple": tuple, "Dict": dict}
		self.pref.addKey(newkey, typDict[typ], typDict[typ]())
]]>
		</addPref>
		<updatePref><![CDATA[
def updatePref(self):
	if not self or not self.tree:
		return
	nd = self.tree.Selection
	self.pth = self.tree.getKeyPathForNode(nd)
	val = self.pref.getValue(self.pth)
	self.txtPrefName.Value = nd.Caption
	if val is not None:
		self.txtPrefValue.Value = val
	else:
		self.txtPrefValue.Value = ""
	self.txtPrefValue.Enabled = (val is not None)
	self.ddType.Value = type(val)
	self.update()
]]>
		</updatePref>
		<importStatements><![CDATA[
from dabo.dLocalize import _
]]>
		</importStatements>
	</code>

	<dSizer SlotCount="1" designerClass="LayoutSizer" Orientation="Vertical">
		<dPanel sizerInfo="{'Proportion': 1, 'HAlign': 'Center', 'VAlign': 'Middle', 'Expand': True}" designerClass="controlMix">
			<dSizer SlotCount="3" designerClass="LayoutSizer" Orientation="Vertical">
				<dTextBox sizerInfo="{'VAlign': 'Middle', 'Border': 6, 'Expand': True}" ReadOnly="True" FontSize="10.5" DataField="pth" designerClass="controlMix" Alignment="Center" DataSource="self.Form"></dTextBox>
				<dSizer SlotCount="1" sizerInfo="{'Proportion': 1, 'Expand': True}" designerClass="LayoutSizer" Orientation="Horizontal">
					<dPageFrame sizerInfo="{'Proportion': 1, 'HAlign': 'Center', 'VAlign': 'Middle', 'Expand': True}" designerClass="controlMix" PageCount="2">
						<dPage Caption="Tree" designerClass="controlMix" Name="dPage">
							<dSizer SlotCount="2" designerClass="LayoutSizer" Orientation="Vertical">
								<dSizer SlotCount="2" sizerInfo="{'Proportion': 1, 'Expand': True}" designerClass="LayoutSizer" Orientation="Horizontal">
									<dTreeView RegID="tree" sizerInfo="{'Proportion': 1, 'HAlign': 'Center', 'VAlign': 'Middle', 'Expand': True}" designerClass="controlMix" Name="treePrefs1" ShowRootNode="False">
										<code>
											<getKeyPathForNode><![CDATA[
def getKeyPathForNode(self, node):
	nds = [node.Caption]
	prnt = node.parent
	while prnt:
		if prnt.Caption:
			nds.insert(0, prnt.Caption)
		prnt = prnt.parent
	return ".".join(nds)
]]>
											</getKeyPathForNode>
											<onAddChild><![CDATA[
def onAddChild(self, evt):
	nd = self.Selection
	basekey = self.getKeyPathForNode(nd)
	ctls = ((_("Preference Name?"), unicode, "prefname"), 
			(_("Type:"), ["String", "Unicode", "Integer", 
			"Float", "Boolean", "List", "Tuple", "Dict"], "typ") )
	dlg = dabo.ui.dOkCancelDialog(self, Caption=_("Add Child Key"))
	dlg.addControlSequence(ctls)
	dlg.typ.Value = "Unicode"
	dlg.show()
	if dlg.Accepted:
		prf = dlg.prefname.Value
		typ = dlg.typ.Value
		self.Form.addPref(basekey, prf, typ)
		for kid in prf.split("."):
			nd = nd.appendChild(kid)
]]>
											</onAddChild>
											<onDeleteNode><![CDATA[
def onDeleteNode(self, evt):
	nd = self.Selection
	key = self.getKeyPathForNode(nd)
	self.Form.deletePref(key)
	self.removeNode(nd)
]]>
											</onDeleteNode>
											<onTreeSelection><![CDATA[
def onTreeSelection(self, evt):
	dabo.ui.callAfter(self.Form.updatePref)
]]>
											</onTreeSelection>
											<onContextMenu><![CDATA[
def onContextMenu(self, evt):
	node = self.Selection
	pop = dabo.ui.dMenu()
	pop.append(_("Delete"), OnHit=self.onDeleteNode)
	currVal = self.Form.getNodeValue(node)
	if currVal is None:
		# This is branch, not a value node
		pop.append(_("Add Child"), OnHit=self.onAddChild)
	self.showContextMenu(pop)
]]>
											</onContextMenu>
										</code>

										<dNode Caption="First Child" designerClass="controlMix"></dNode>
										<dNode Caption="Second Child" designerClass="controlMix">
											<dNode Caption="Grandkid #1" designerClass="controlMix"></dNode>
											<dNode Caption="Grandkid #2" designerClass="controlMix">
												<dNode Caption="Great-Grandkid #1" designerClass="controlMix"></dNode>
											</dNode>
											<dNode Caption="Grandkid #3" designerClass="controlMix"></dNode>
										</dNode>
										<dNode Caption="Third Child" designerClass="controlMix"></dNode>
									</dTreeView>
									<dGridSizer sizerInfo="{'Border': 30, 'Expand': True}" Rows="3" designerClass="LayoutGridSizer" VGap="10" MaxDimension="r" Columns="2">
										<dLabel Caption="Pref Name:" sizerInfo="{'Proportion': 0, 'HAlign': 'Right', 'ColExpand': True, 'VAlign': 'Middle', 'Expand': False, 'RowExpand': False}" designerClass="controlMix" Name="dLabel3" rowColPos="(0, 0)"></dLabel>
										<dLabel Caption="Value:" sizerInfo="{'Proportion': 0, 'HAlign': 'Right', 'ColExpand': True, 'VAlign': 'Middle', 'Expand': False, 'RowExpand': False}" designerClass="controlMix" Name="dLabel11" rowColPos="(1, 0)"></dLabel>
										<dTextBox RegID="txtPrefValue" sizerInfo="{'Proportion': 0, 'ColExpand': True, 'Expand': True, 'RowExpand': False}" designerClass="controlMix" Name="dTextBox3" rowColPos="(1, 1)">
											<code>
												<onKeyUp><![CDATA[
def onKeyUp(self, evt):
	dabo.ui.callAfterInterval(250, self.Form.savePref())
]]>
												</onKeyUp>
											</code>
										</dTextBox>
										<dTextBox sizerInfo="{'Proportion': 0, 'ColExpand': True, 'Expand': True, 'RowExpand': False}" Name="dTextBox11" rowColPos="(0, 1)" ReadOnly="True" designerClass="controlMix" RegID="txtPrefName"></dTextBox>
										<dDropdownList sizerInfo="{'Proportion': 0, 'ColExpand': True, 'Expand': True, 'RowExpand': False}" Name="dDropdownList1" rowColPos="(2, 1)" Choices="[u&apos;-None-&apos;, u&apos;String&apos;, u&apos;Unicode&apos;, u&apos;Integer&apos;, u&apos;Float&apos;, u&apos;Boolean&apos;, u&apos;List&apos;, u&apos;Tuple&apos;, u&apos;Dict&apos;]" designerClass="controlMix" RegID="ddType">
											<code>
												<afterInit><![CDATA[
def afterInit(self):
	self.Keys = [type(None), str, unicode, int, float, bool, list, tuple, dict]
	self.ValueMode = "Key"
]]>
												</afterInit>
											</code>
										</dDropdownList>
										<dLabel Caption="Type:" sizerInfo="{'Proportion': 0, 'HAlign': 'Right', 'ColExpand': True, 'VAlign': 'Middle', 'Expand': False, 'RowExpand': False}" designerClass="controlMix" Name="dLabel21" rowColPos="(2, 0)"></dLabel>
									</dGridSizer>
								</dSizer>
								<dSizer SlotCount="2" sizerInfo="{'HAlign': 'Center'}" designerClass="LayoutSizer" Orientation="Horizontal">
									<dButton Caption="Expand All" sizerInfo="{'HAlign': 'Center', 'VAlign': 'Middle', 'Border': 5}" designerClass="controlMix">
										<code>
											<onHit><![CDATA[
def onHit(self, evt):
	self.Form.expandAll()
]]>
											</onHit>
										</code>
									</dButton>
									<dButton Caption="Collapse All" sizerInfo="{'HAlign': 'Center', 'VAlign': 'Middle', 'Border': 5}" designerClass="controlMix" Name="dButton1">
										<code>
											<onHit><![CDATA[
def onHit(self, evt):
	self.Form.collapseAll()
]]>
											</onHit>
										</code>
									</dButton>
								</dSizer>
							</dSizer>
						</dPage>
						<dPage Caption="Filter" designerClass="controlMix" Name="dPage1">
							<dSizer SlotCount="4" designerClass="LayoutSizer" Orientation="Vertical">
								<dBorderSizer SlotCount="1" Caption="Filter Expression" sizerInfo="{'BorderSides': ['Right'], 'Border': 200, 'Expand': True}" designerClass="LayoutBorderSizer" Orientation="Horizontal">
									<dTextBox RegID="txtFilter" sizerInfo="{'Proportion': 1, 'VAlign': 'Middle', 'Border': 3, 'Expand': True}" designerClass="controlMix" Name="txtFilter">
										<code>
											<onKeyChar><![CDATA[
def onKeyChar(self, evt):
	dabo.ui.callAfter(self.Form.filterPrefs)
]]>
											</onKeyChar>
										</code>
									</dTextBox>
								</dBorderSizer>
								<dGrid ColumnCount="2" sizerInfo="{'Proportion': 1, 'Border': 8, 'Expand': True}" Name="grdFilteredPrefs" designerClass="controlMix" RegID="grdFilteredPrefs" SelectionMode="Row">
									<code>
										<rowChanged><![CDATA[
def rowChanged(self):
	try:
		key = self.DataSet[self.CurrentRow]["ckey"]
		self.Form.syncTree(key)
	except:
		# Data set has not yet been set
		pass
]]>
										</rowChanged>
										<onGridCellSelected><![CDATA[
def onGridCellSelected(self, evt):
	if evt.row != self.CurrentRow:
		dabo.ui.callAfter(self.rowChanged)
]]>
										</onGridCellSelected>
									</code>

									<dColumn FontSize="9.0" HeaderFontFace="Arial" Caption="Preference" Width="497" designerClass="controlMix" HorizontalAlignment="Left" FontFace="Arial" HeaderFontSize="9.0" Order="0" DataField="ckey"></dColumn>
									<dColumn FontSize="9.0" HeaderFontFace="Arial" Caption="Value" Width="123" designerClass="controlMix" HorizontalAlignment="Left" FontFace="Arial" HeaderFontSize="9.0" Order="10" DataField="cvalue"></dColumn>
								</dGrid>
								<dLabel RegID="lblResults" Caption="-" sizerInfo="{'VAlign': 'Middle', 'Border': 3, 'Expand': True}" designerClass="controlMix"></dLabel>
								<dPanel sizerInfo="{'Proportion': 1, 'Border': 10, 'Expand': True}" designerClass="LayoutPanel"></dPanel>
							</dSizer>
						</dPage>
					</dPageFrame>
				</dSizer>
				<dSizer SlotCount="3" sizerInfo="{'HAlign': 'Right', 'VAlign': 'Bottom', 'Border': 20}" designerClass="LayoutSizer" Orientation="Horizontal">
					<dButton Caption="Exit, no save" sizerInfo="{'HAlign': 'Center', 'VAlign': 'Middle', 'Expand': True}" designerClass="controlMix" Name="dButton21">
						<code>
							<onHit><![CDATA[
def onHit(self, evt):
	self.Form.exit(False)
]]>
							</onHit>
						</code>
					</dButton>
					<dPanel Spacing="10" sizerInfo="{'Expand': True}" designerClass="LayoutSpacerPanel"></dPanel>
					<dButton Caption="Save and Exit" sizerInfo="{'HAlign': 'Center', 'VAlign': 'Middle', 'Expand': True}" designerClass="controlMix" Name="dButton11">
						<code>
							<onHit><![CDATA[
def onHit(self, evt):
	self.Form.exit(True)
]]>
							</onHit>
						</code>
					</dButton>
				</dSizer>
			</dSizer>
		</dPanel>
	</dSizer>
</dForm>
